var expect$1466 = require('expect.js');
describe('require core', function () {
    it('should create a _ki object', function () {
        _ki = {
            init: function (self$1468, ns_name$1469) {
                if (_ki.namespaces[ns_name$1469] === undefined) {
                    _ki.namespaces[ns_name$1469] = { vars: {} };
                }
                self$1468._ki_ns_name = ns_name$1469;
                self$1468._ki_ns_ctx = self$1468;
                _ki.intern.bind(self$1468)(_ki.modules.core);
                _ki.intern.bind(self$1468)(_ki.modules.mori);
                _ki.intern.bind(self$1468)(_ki.modules);
                _ki.intern.bind(self$1468)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$1470) {
                for (var e$1471 in obj$1470) {
                    this[e$1471] = obj$1470[e$1471];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$1472) {
                        return x$1472 === false || x$1472 == null ? false : true;
                    },
                    falsey: function (x$1473) {
                        return !truthy(x$1473);
                    },
                    not: function (x$1474) {
                        return !truthy(x$1474);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$1475 = 0;
                        for (var i$1476 = 0; i$1476 < arguments.length; i$1476++) {
                            res$1475 += arguments[i$1476];
                        }
                        return res$1475;
                    },
                    sub: function () {
                        var res$1477 = arguments[0];
                        for (var i$1478 = 1; i$1478 < arguments.length; i$1478++) {
                            res$1477 -= arguments[i$1478];
                        }
                        return res$1477;
                    },
                    mul: function () {
                        var res$1479 = 1;
                        for (var i$1480 = 0; i$1480 < arguments.length; i$1480++) {
                            res$1479 *= arguments[i$1480];
                        }
                        return res$1479;
                    },
                    div: function () {
                        var res$1481 = arguments[0];
                        for (var i$1482 = 1; i$1482 < arguments.length; i$1482++) {
                            res$1481 /= arguments[i$1482];
                        }
                        return res$1481;
                    },
                    mod: function (a$1483, b$1484) {
                        return a$1483 % b$1484;
                    },
                    lt: function () {
                        var res$1485 = true;
                        for (var i$1486 = 0; i$1486 < arguments.length - 1; i$1486++) {
                            res$1485 = res$1485 && arguments[i$1486] < arguments[i$1486 + 1];
                            if (!res$1485)
                                break;
                        }
                        return res$1485;
                    },
                    gt: function () {
                        var res$1487 = true;
                        for (var i$1488 = 0; i$1488 < arguments.length - 1; i$1488++) {
                            res$1487 = res$1487 && arguments[i$1488] > arguments[i$1488 + 1];
                            if (!res$1487)
                                break;
                        }
                        return res$1487;
                    },
                    leq: function () {
                        var res$1489 = true;
                        for (var i$1490 = 0; i$1490 < arguments.length - 1; i$1490++) {
                            res$1489 = res$1489 && arguments[i$1490] <= arguments[i$1490 + 1];
                            if (!res$1489)
                                break;
                        }
                        return res$1489;
                    },
                    geq: function () {
                        var res$1491 = true;
                        for (var i$1492 = 0; i$1492 < arguments.length - 1; i$1492++) {
                            res$1491 = res$1491 && arguments[i$1492] >= arguments[i$1492 + 1];
                        }
                        return res$1491;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$1493) {
                        try {
                            return require('mori');
                        } catch (e$1494) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(typeof _ki).to.not.eql('undefined');
    });
    it('should make mori available', function () {
        _ki = {
            init: function (self$1498, ns_name$1499) {
                if (_ki.namespaces[ns_name$1499] === undefined) {
                    _ki.namespaces[ns_name$1499] = { vars: {} };
                }
                self$1498._ki_ns_name = ns_name$1499;
                self$1498._ki_ns_ctx = self$1498;
                _ki.intern.bind(self$1498)(_ki.modules.core);
                _ki.intern.bind(self$1498)(_ki.modules.mori);
                _ki.intern.bind(self$1498)(_ki.modules);
                _ki.intern.bind(self$1498)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$1500) {
                for (var e$1501 in obj$1500) {
                    this[e$1501] = obj$1500[e$1501];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$1502) {
                        return x$1502 === false || x$1502 == null ? false : true;
                    },
                    falsey: function (x$1503) {
                        return !truthy(x$1503);
                    },
                    not: function (x$1504) {
                        return !truthy(x$1504);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$1505 = 0;
                        for (var i$1506 = 0; i$1506 < arguments.length; i$1506++) {
                            res$1505 += arguments[i$1506];
                        }
                        return res$1505;
                    },
                    sub: function () {
                        var res$1507 = arguments[0];
                        for (var i$1508 = 1; i$1508 < arguments.length; i$1508++) {
                            res$1507 -= arguments[i$1508];
                        }
                        return res$1507;
                    },
                    mul: function () {
                        var res$1509 = 1;
                        for (var i$1510 = 0; i$1510 < arguments.length; i$1510++) {
                            res$1509 *= arguments[i$1510];
                        }
                        return res$1509;
                    },
                    div: function () {
                        var res$1511 = arguments[0];
                        for (var i$1512 = 1; i$1512 < arguments.length; i$1512++) {
                            res$1511 /= arguments[i$1512];
                        }
                        return res$1511;
                    },
                    mod: function (a$1513, b$1514) {
                        return a$1513 % b$1514;
                    },
                    lt: function () {
                        var res$1515 = true;
                        for (var i$1516 = 0; i$1516 < arguments.length - 1; i$1516++) {
                            res$1515 = res$1515 && arguments[i$1516] < arguments[i$1516 + 1];
                            if (!res$1515)
                                break;
                        }
                        return res$1515;
                    },
                    gt: function () {
                        var res$1517 = true;
                        for (var i$1518 = 0; i$1518 < arguments.length - 1; i$1518++) {
                            res$1517 = res$1517 && arguments[i$1518] > arguments[i$1518 + 1];
                            if (!res$1517)
                                break;
                        }
                        return res$1517;
                    },
                    leq: function () {
                        var res$1519 = true;
                        for (var i$1520 = 0; i$1520 < arguments.length - 1; i$1520++) {
                            res$1519 = res$1519 && arguments[i$1520] <= arguments[i$1520 + 1];
                            if (!res$1519)
                                break;
                        }
                        return res$1519;
                    },
                    geq: function () {
                        var res$1521 = true;
                        for (var i$1522 = 0; i$1522 < arguments.length - 1; i$1522++) {
                            res$1521 = res$1521 && arguments[i$1522] >= arguments[i$1522 + 1];
                        }
                        return res$1521;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$1523) {
                        try {
                            return require('mori');
                        } catch (e$1524) {
                            return mori;
                        }
                    }
                }()
            }
        };
        var mori$1496 = _ki.modules.mori;
        expect$1466(function () {
            _ki.init(this, '_ki');
            return vector(1, 2, 3);
        }()).to.eql(mori$1496.vector(1, 2, 3));
    });
});
describe('sexpressions', function () {
    it('should allow to call js functions', function () {
        _ki = {
            init: function (self$1544, ns_name$1545) {
                if (_ki.namespaces[ns_name$1545] === undefined) {
                    _ki.namespaces[ns_name$1545] = { vars: {} };
                }
                self$1544._ki_ns_name = ns_name$1545;
                self$1544._ki_ns_ctx = self$1544;
                _ki.intern.bind(self$1544)(_ki.modules.core);
                _ki.intern.bind(self$1544)(_ki.modules.mori);
                _ki.intern.bind(self$1544)(_ki.modules);
                _ki.intern.bind(self$1544)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$1546) {
                for (var e$1547 in obj$1546) {
                    this[e$1547] = obj$1546[e$1547];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$1548) {
                        return x$1548 === false || x$1548 == null ? false : true;
                    },
                    falsey: function (x$1549) {
                        return !truthy(x$1549);
                    },
                    not: function (x$1550) {
                        return !truthy(x$1550);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$1551 = 0;
                        for (var i$1552 = 0; i$1552 < arguments.length; i$1552++) {
                            res$1551 += arguments[i$1552];
                        }
                        return res$1551;
                    },
                    sub: function () {
                        var res$1553 = arguments[0];
                        for (var i$1554 = 1; i$1554 < arguments.length; i$1554++) {
                            res$1553 -= arguments[i$1554];
                        }
                        return res$1553;
                    },
                    mul: function () {
                        var res$1555 = 1;
                        for (var i$1556 = 0; i$1556 < arguments.length; i$1556++) {
                            res$1555 *= arguments[i$1556];
                        }
                        return res$1555;
                    },
                    div: function () {
                        var res$1557 = arguments[0];
                        for (var i$1558 = 1; i$1558 < arguments.length; i$1558++) {
                            res$1557 /= arguments[i$1558];
                        }
                        return res$1557;
                    },
                    mod: function (a$1559, b$1560) {
                        return a$1559 % b$1560;
                    },
                    lt: function () {
                        var res$1561 = true;
                        for (var i$1562 = 0; i$1562 < arguments.length - 1; i$1562++) {
                            res$1561 = res$1561 && arguments[i$1562] < arguments[i$1562 + 1];
                            if (!res$1561)
                                break;
                        }
                        return res$1561;
                    },
                    gt: function () {
                        var res$1563 = true;
                        for (var i$1564 = 0; i$1564 < arguments.length - 1; i$1564++) {
                            res$1563 = res$1563 && arguments[i$1564] > arguments[i$1564 + 1];
                            if (!res$1563)
                                break;
                        }
                        return res$1563;
                    },
                    leq: function () {
                        var res$1565 = true;
                        for (var i$1566 = 0; i$1566 < arguments.length - 1; i$1566++) {
                            res$1565 = res$1565 && arguments[i$1566] <= arguments[i$1566 + 1];
                            if (!res$1565)
                                break;
                        }
                        return res$1565;
                    },
                    geq: function () {
                        var res$1567 = true;
                        for (var i$1568 = 0; i$1568 < arguments.length - 1; i$1568++) {
                            res$1567 = res$1567 && arguments[i$1568] >= arguments[i$1568 + 1];
                        }
                        return res$1567;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$1569) {
                        try {
                            return require('mori');
                        } catch (e$1570) {
                            return mori;
                        }
                    }
                }()
            }
        };
        var f0$1538 = function () {
            return 1;
        };
        var f1$1539 = function (a$1571) {
            return a$1571;
        };
        var f2$1540 = function (a$1572, b$1573) {
            return [
                a$1572,
                b$1573
            ];
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return f0$1538();
        }()).to.eql(1);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return f1$1539(1);
        }()).to.eql(1);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return f2$1540(1, 2);
        }()).to.eql([
            1,
            2
        ]);
    });
    it('should allow to use attribute access notation as function name', function () {
        _ki = {
            init: function (self$1612, ns_name$1613) {
                if (_ki.namespaces[ns_name$1613] === undefined) {
                    _ki.namespaces[ns_name$1613] = { vars: {} };
                }
                self$1612._ki_ns_name = ns_name$1613;
                self$1612._ki_ns_ctx = self$1612;
                _ki.intern.bind(self$1612)(_ki.modules.core);
                _ki.intern.bind(self$1612)(_ki.modules.mori);
                _ki.intern.bind(self$1612)(_ki.modules);
                _ki.intern.bind(self$1612)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$1614) {
                for (var e$1615 in obj$1614) {
                    this[e$1615] = obj$1614[e$1615];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$1616) {
                        return x$1616 === false || x$1616 == null ? false : true;
                    },
                    falsey: function (x$1617) {
                        return !truthy(x$1617);
                    },
                    not: function (x$1618) {
                        return !truthy(x$1618);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$1619 = 0;
                        for (var i$1620 = 0; i$1620 < arguments.length; i$1620++) {
                            res$1619 += arguments[i$1620];
                        }
                        return res$1619;
                    },
                    sub: function () {
                        var res$1621 = arguments[0];
                        for (var i$1622 = 1; i$1622 < arguments.length; i$1622++) {
                            res$1621 -= arguments[i$1622];
                        }
                        return res$1621;
                    },
                    mul: function () {
                        var res$1623 = 1;
                        for (var i$1624 = 0; i$1624 < arguments.length; i$1624++) {
                            res$1623 *= arguments[i$1624];
                        }
                        return res$1623;
                    },
                    div: function () {
                        var res$1625 = arguments[0];
                        for (var i$1626 = 1; i$1626 < arguments.length; i$1626++) {
                            res$1625 /= arguments[i$1626];
                        }
                        return res$1625;
                    },
                    mod: function (a$1627, b$1628) {
                        return a$1627 % b$1628;
                    },
                    lt: function () {
                        var res$1629 = true;
                        for (var i$1630 = 0; i$1630 < arguments.length - 1; i$1630++) {
                            res$1629 = res$1629 && arguments[i$1630] < arguments[i$1630 + 1];
                            if (!res$1629)
                                break;
                        }
                        return res$1629;
                    },
                    gt: function () {
                        var res$1631 = true;
                        for (var i$1632 = 0; i$1632 < arguments.length - 1; i$1632++) {
                            res$1631 = res$1631 && arguments[i$1632] > arguments[i$1632 + 1];
                            if (!res$1631)
                                break;
                        }
                        return res$1631;
                    },
                    leq: function () {
                        var res$1633 = true;
                        for (var i$1634 = 0; i$1634 < arguments.length - 1; i$1634++) {
                            res$1633 = res$1633 && arguments[i$1634] <= arguments[i$1634 + 1];
                            if (!res$1633)
                                break;
                        }
                        return res$1633;
                    },
                    geq: function () {
                        var res$1635 = true;
                        for (var i$1636 = 0; i$1636 < arguments.length - 1; i$1636++) {
                            res$1635 = res$1635 && arguments[i$1636] >= arguments[i$1636 + 1];
                        }
                        return res$1635;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$1637) {
                        try {
                            return require('mori');
                        } catch (e$1638) {
                            return mori;
                        }
                    }
                }()
            }
        };
        var foo0$1600 = {
                bar: function () {
                    return 1;
                }
            };
        var foo1$1601 = {
                bar: function (a$1639) {
                    return a$1639;
                }
            };
        var foo2$1602 = {
                bar: function (a$1640, b$1641) {
                    return [
                        a$1640,
                        b$1641
                    ];
                }
            };
        var goo0$1603 = {
                bar: {
                    baz: function () {
                        return 1;
                    }
                }
            };
        var goo1$1604 = {
                bar: {
                    baz: function (a$1642) {
                        return a$1642;
                    }
                }
            };
        var goo2$1605 = {
                bar: {
                    baz: function (a$1643, b$1644) {
                        return [
                            a$1643,
                            b$1644
                        ];
                    }
                }
            };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return foo0$1600.bar();
        }()).to.eql(1);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return foo1$1601.bar(1);
        }()).to.eql(1);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return foo2$1602.bar(1, 2);
        }()).to.eql([
            1,
            2
        ]);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return goo0$1603.bar.baz();
        }()).to.eql(1);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return goo1$1604.bar.baz(1);
        }()).to.eql(1);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return goo2$1605.bar.baz(1, 2);
        }()).to.eql([
            1,
            2
        ]);
    });
    it('should allow to use attribute access notation as function argument', function () {
        _ki = {
            init: function (self$1695, ns_name$1696) {
                if (_ki.namespaces[ns_name$1696] === undefined) {
                    _ki.namespaces[ns_name$1696] = { vars: {} };
                }
                self$1695._ki_ns_name = ns_name$1696;
                self$1695._ki_ns_ctx = self$1695;
                _ki.intern.bind(self$1695)(_ki.modules.core);
                _ki.intern.bind(self$1695)(_ki.modules.mori);
                _ki.intern.bind(self$1695)(_ki.modules);
                _ki.intern.bind(self$1695)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$1697) {
                for (var e$1698 in obj$1697) {
                    this[e$1698] = obj$1697[e$1698];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$1699) {
                        return x$1699 === false || x$1699 == null ? false : true;
                    },
                    falsey: function (x$1700) {
                        return !truthy(x$1700);
                    },
                    not: function (x$1701) {
                        return !truthy(x$1701);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$1702 = 0;
                        for (var i$1703 = 0; i$1703 < arguments.length; i$1703++) {
                            res$1702 += arguments[i$1703];
                        }
                        return res$1702;
                    },
                    sub: function () {
                        var res$1704 = arguments[0];
                        for (var i$1705 = 1; i$1705 < arguments.length; i$1705++) {
                            res$1704 -= arguments[i$1705];
                        }
                        return res$1704;
                    },
                    mul: function () {
                        var res$1706 = 1;
                        for (var i$1707 = 0; i$1707 < arguments.length; i$1707++) {
                            res$1706 *= arguments[i$1707];
                        }
                        return res$1706;
                    },
                    div: function () {
                        var res$1708 = arguments[0];
                        for (var i$1709 = 1; i$1709 < arguments.length; i$1709++) {
                            res$1708 /= arguments[i$1709];
                        }
                        return res$1708;
                    },
                    mod: function (a$1710, b$1711) {
                        return a$1710 % b$1711;
                    },
                    lt: function () {
                        var res$1712 = true;
                        for (var i$1713 = 0; i$1713 < arguments.length - 1; i$1713++) {
                            res$1712 = res$1712 && arguments[i$1713] < arguments[i$1713 + 1];
                            if (!res$1712)
                                break;
                        }
                        return res$1712;
                    },
                    gt: function () {
                        var res$1714 = true;
                        for (var i$1715 = 0; i$1715 < arguments.length - 1; i$1715++) {
                            res$1714 = res$1714 && arguments[i$1715] > arguments[i$1715 + 1];
                            if (!res$1714)
                                break;
                        }
                        return res$1714;
                    },
                    leq: function () {
                        var res$1716 = true;
                        for (var i$1717 = 0; i$1717 < arguments.length - 1; i$1717++) {
                            res$1716 = res$1716 && arguments[i$1717] <= arguments[i$1717 + 1];
                            if (!res$1716)
                                break;
                        }
                        return res$1716;
                    },
                    geq: function () {
                        var res$1718 = true;
                        for (var i$1719 = 0; i$1719 < arguments.length - 1; i$1719++) {
                            res$1718 = res$1718 && arguments[i$1719] >= arguments[i$1719 + 1];
                        }
                        return res$1718;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$1720) {
                        try {
                            return require('mori');
                        } catch (e$1721) {
                            return mori;
                        }
                    }
                }()
            }
        };
        var goo1$1688 = {
                bar: {
                    baz: function (a$1722) {
                        return a$1722;
                    }
                }
            };
        var goo2$1689 = {
                bar: {
                    baz: function (a$1723, b$1724) {
                        return [
                            a$1723,
                            b$1724
                        ];
                    }
                }
            };
        var goo3$1690 = {
                bar: {
                    baz: function (a$1725, b$1726, c$1727) {
                        return [
                            a$1725,
                            b$1726,
                            c$1727
                        ];
                    }
                }
            };
        var data$1691 = { a: { b: 0 } };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return goo1$1688.bar.baz(data$1691.a.b);
        }()).to.eql(0);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return goo2$1689.bar.baz(data$1691.a.b, 1);
        }()).to.eql([
            0,
            1
        ]);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return goo3$1690.bar.baz(data$1691.a.b, 1, data$1691.a.b);
        }()).to.eql([
            0,
            1,
            0
        ]);
    });
    it('should allow to call mori functions on mori data structures', function () {
        _ki = {
            init: function (self$1753, ns_name$1754) {
                if (_ki.namespaces[ns_name$1754] === undefined) {
                    _ki.namespaces[ns_name$1754] = { vars: {} };
                }
                self$1753._ki_ns_name = ns_name$1754;
                self$1753._ki_ns_ctx = self$1753;
                _ki.intern.bind(self$1753)(_ki.modules.core);
                _ki.intern.bind(self$1753)(_ki.modules.mori);
                _ki.intern.bind(self$1753)(_ki.modules);
                _ki.intern.bind(self$1753)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$1755) {
                for (var e$1756 in obj$1755) {
                    this[e$1756] = obj$1755[e$1756];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$1757) {
                        return x$1757 === false || x$1757 == null ? false : true;
                    },
                    falsey: function (x$1758) {
                        return !truthy(x$1758);
                    },
                    not: function (x$1759) {
                        return !truthy(x$1759);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$1760 = 0;
                        for (var i$1761 = 0; i$1761 < arguments.length; i$1761++) {
                            res$1760 += arguments[i$1761];
                        }
                        return res$1760;
                    },
                    sub: function () {
                        var res$1762 = arguments[0];
                        for (var i$1763 = 1; i$1763 < arguments.length; i$1763++) {
                            res$1762 -= arguments[i$1763];
                        }
                        return res$1762;
                    },
                    mul: function () {
                        var res$1764 = 1;
                        for (var i$1765 = 0; i$1765 < arguments.length; i$1765++) {
                            res$1764 *= arguments[i$1765];
                        }
                        return res$1764;
                    },
                    div: function () {
                        var res$1766 = arguments[0];
                        for (var i$1767 = 1; i$1767 < arguments.length; i$1767++) {
                            res$1766 /= arguments[i$1767];
                        }
                        return res$1766;
                    },
                    mod: function (a$1768, b$1769) {
                        return a$1768 % b$1769;
                    },
                    lt: function () {
                        var res$1770 = true;
                        for (var i$1771 = 0; i$1771 < arguments.length - 1; i$1771++) {
                            res$1770 = res$1770 && arguments[i$1771] < arguments[i$1771 + 1];
                            if (!res$1770)
                                break;
                        }
                        return res$1770;
                    },
                    gt: function () {
                        var res$1772 = true;
                        for (var i$1773 = 0; i$1773 < arguments.length - 1; i$1773++) {
                            res$1772 = res$1772 && arguments[i$1773] > arguments[i$1773 + 1];
                            if (!res$1772)
                                break;
                        }
                        return res$1772;
                    },
                    leq: function () {
                        var res$1774 = true;
                        for (var i$1775 = 0; i$1775 < arguments.length - 1; i$1775++) {
                            res$1774 = res$1774 && arguments[i$1775] <= arguments[i$1775 + 1];
                            if (!res$1774)
                                break;
                        }
                        return res$1774;
                    },
                    geq: function () {
                        var res$1776 = true;
                        for (var i$1777 = 0; i$1777 < arguments.length - 1; i$1777++) {
                            res$1776 = res$1776 && arguments[i$1777] >= arguments[i$1777 + 1];
                        }
                        return res$1776;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$1778) {
                        try {
                            return require('mori');
                        } catch (e$1779) {
                            return mori;
                        }
                    }
                }()
            }
        };
        var foo$1750 = function () {
                _ki.init(this, '_ki');
                return vector(1, 2, 3);
            }();
        expect$1466(function () {
            _ki.init(this, '_ki');
            return conj(foo$1750, 4);
        }()).to.eql(function () {
            _ki.init(this, '_ki');
            return vector(1, 2, 3, 4);
        }());
    });
});
describe('lambdas', function () {
    it('should allow to define anonymous functions and call them from js', function () {
        _ki = {
            init: function (self$1819, ns_name$1820) {
                if (_ki.namespaces[ns_name$1820] === undefined) {
                    _ki.namespaces[ns_name$1820] = { vars: {} };
                }
                self$1819._ki_ns_name = ns_name$1820;
                self$1819._ki_ns_ctx = self$1819;
                _ki.intern.bind(self$1819)(_ki.modules.core);
                _ki.intern.bind(self$1819)(_ki.modules.mori);
                _ki.intern.bind(self$1819)(_ki.modules);
                _ki.intern.bind(self$1819)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$1821) {
                for (var e$1822 in obj$1821) {
                    this[e$1822] = obj$1821[e$1822];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$1823) {
                        return x$1823 === false || x$1823 == null ? false : true;
                    },
                    falsey: function (x$1824) {
                        return !truthy(x$1824);
                    },
                    not: function (x$1825) {
                        return !truthy(x$1825);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$1826 = 0;
                        for (var i$1827 = 0; i$1827 < arguments.length; i$1827++) {
                            res$1826 += arguments[i$1827];
                        }
                        return res$1826;
                    },
                    sub: function () {
                        var res$1828 = arguments[0];
                        for (var i$1829 = 1; i$1829 < arguments.length; i$1829++) {
                            res$1828 -= arguments[i$1829];
                        }
                        return res$1828;
                    },
                    mul: function () {
                        var res$1830 = 1;
                        for (var i$1831 = 0; i$1831 < arguments.length; i$1831++) {
                            res$1830 *= arguments[i$1831];
                        }
                        return res$1830;
                    },
                    div: function () {
                        var res$1832 = arguments[0];
                        for (var i$1833 = 1; i$1833 < arguments.length; i$1833++) {
                            res$1832 /= arguments[i$1833];
                        }
                        return res$1832;
                    },
                    mod: function (a$1834, b$1835) {
                        return a$1834 % b$1835;
                    },
                    lt: function () {
                        var res$1836 = true;
                        for (var i$1837 = 0; i$1837 < arguments.length - 1; i$1837++) {
                            res$1836 = res$1836 && arguments[i$1837] < arguments[i$1837 + 1];
                            if (!res$1836)
                                break;
                        }
                        return res$1836;
                    },
                    gt: function () {
                        var res$1838 = true;
                        for (var i$1839 = 0; i$1839 < arguments.length - 1; i$1839++) {
                            res$1838 = res$1838 && arguments[i$1839] > arguments[i$1839 + 1];
                            if (!res$1838)
                                break;
                        }
                        return res$1838;
                    },
                    leq: function () {
                        var res$1840 = true;
                        for (var i$1841 = 0; i$1841 < arguments.length - 1; i$1841++) {
                            res$1840 = res$1840 && arguments[i$1841] <= arguments[i$1841 + 1];
                            if (!res$1840)
                                break;
                        }
                        return res$1840;
                    },
                    geq: function () {
                        var res$1842 = true;
                        for (var i$1843 = 0; i$1843 < arguments.length - 1; i$1843++) {
                            res$1842 = res$1842 && arguments[i$1843] >= arguments[i$1843 + 1];
                        }
                        return res$1842;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$1844) {
                        try {
                            return require('mori');
                        } catch (e$1845) {
                            return mori;
                        }
                    }
                }()
            }
        };
        var f$1818 = function () {
                _ki.init(this, '_ki');
                return function (x$1847) {
                    return sum(x$1847, 1);
                };
            }();
        expect$1466(f$1818(1)).to.eql(2);
    });
    it('should allow to define anonymous functions and use them in ki', function () {
        _ki = {
            init: function (self$1860, ns_name$1861) {
                if (_ki.namespaces[ns_name$1861] === undefined) {
                    _ki.namespaces[ns_name$1861] = { vars: {} };
                }
                self$1860._ki_ns_name = ns_name$1861;
                self$1860._ki_ns_ctx = self$1860;
                _ki.intern.bind(self$1860)(_ki.modules.core);
                _ki.intern.bind(self$1860)(_ki.modules.mori);
                _ki.intern.bind(self$1860)(_ki.modules);
                _ki.intern.bind(self$1860)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$1862) {
                for (var e$1863 in obj$1862) {
                    this[e$1863] = obj$1862[e$1863];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$1864) {
                        return x$1864 === false || x$1864 == null ? false : true;
                    },
                    falsey: function (x$1865) {
                        return !truthy(x$1865);
                    },
                    not: function (x$1866) {
                        return !truthy(x$1866);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$1867 = 0;
                        for (var i$1868 = 0; i$1868 < arguments.length; i$1868++) {
                            res$1867 += arguments[i$1868];
                        }
                        return res$1867;
                    },
                    sub: function () {
                        var res$1869 = arguments[0];
                        for (var i$1870 = 1; i$1870 < arguments.length; i$1870++) {
                            res$1869 -= arguments[i$1870];
                        }
                        return res$1869;
                    },
                    mul: function () {
                        var res$1871 = 1;
                        for (var i$1872 = 0; i$1872 < arguments.length; i$1872++) {
                            res$1871 *= arguments[i$1872];
                        }
                        return res$1871;
                    },
                    div: function () {
                        var res$1873 = arguments[0];
                        for (var i$1874 = 1; i$1874 < arguments.length; i$1874++) {
                            res$1873 /= arguments[i$1874];
                        }
                        return res$1873;
                    },
                    mod: function (a$1875, b$1876) {
                        return a$1875 % b$1876;
                    },
                    lt: function () {
                        var res$1877 = true;
                        for (var i$1878 = 0; i$1878 < arguments.length - 1; i$1878++) {
                            res$1877 = res$1877 && arguments[i$1878] < arguments[i$1878 + 1];
                            if (!res$1877)
                                break;
                        }
                        return res$1877;
                    },
                    gt: function () {
                        var res$1879 = true;
                        for (var i$1880 = 0; i$1880 < arguments.length - 1; i$1880++) {
                            res$1879 = res$1879 && arguments[i$1880] > arguments[i$1880 + 1];
                            if (!res$1879)
                                break;
                        }
                        return res$1879;
                    },
                    leq: function () {
                        var res$1881 = true;
                        for (var i$1882 = 0; i$1882 < arguments.length - 1; i$1882++) {
                            res$1881 = res$1881 && arguments[i$1882] <= arguments[i$1882 + 1];
                            if (!res$1881)
                                break;
                        }
                        return res$1881;
                    },
                    geq: function () {
                        var res$1883 = true;
                        for (var i$1884 = 0; i$1884 < arguments.length - 1; i$1884++) {
                            res$1883 = res$1883 && arguments[i$1884] >= arguments[i$1884 + 1];
                        }
                        return res$1883;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$1885) {
                        try {
                            return require('mori');
                        } catch (e$1886) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return clj_to_js(map(function (x$1909) {
                return sum(x$1909, 1);
            }, vector(1, 2, 3)));
        }()).to.eql([
            2,
            3,
            4
        ]);
    });
    it('should allow to define named anonymous functions and call them recursively', function () {
        _ki = {
            init: function (self$1922, ns_name$1923) {
                if (_ki.namespaces[ns_name$1923] === undefined) {
                    _ki.namespaces[ns_name$1923] = { vars: {} };
                }
                self$1922._ki_ns_name = ns_name$1923;
                self$1922._ki_ns_ctx = self$1922;
                _ki.intern.bind(self$1922)(_ki.modules.core);
                _ki.intern.bind(self$1922)(_ki.modules.mori);
                _ki.intern.bind(self$1922)(_ki.modules);
                _ki.intern.bind(self$1922)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$1924) {
                for (var e$1925 in obj$1924) {
                    this[e$1925] = obj$1924[e$1925];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$1926) {
                        return x$1926 === false || x$1926 == null ? false : true;
                    },
                    falsey: function (x$1927) {
                        return !truthy(x$1927);
                    },
                    not: function (x$1928) {
                        return !truthy(x$1928);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$1929 = 0;
                        for (var i$1930 = 0; i$1930 < arguments.length; i$1930++) {
                            res$1929 += arguments[i$1930];
                        }
                        return res$1929;
                    },
                    sub: function () {
                        var res$1931 = arguments[0];
                        for (var i$1932 = 1; i$1932 < arguments.length; i$1932++) {
                            res$1931 -= arguments[i$1932];
                        }
                        return res$1931;
                    },
                    mul: function () {
                        var res$1933 = 1;
                        for (var i$1934 = 0; i$1934 < arguments.length; i$1934++) {
                            res$1933 *= arguments[i$1934];
                        }
                        return res$1933;
                    },
                    div: function () {
                        var res$1935 = arguments[0];
                        for (var i$1936 = 1; i$1936 < arguments.length; i$1936++) {
                            res$1935 /= arguments[i$1936];
                        }
                        return res$1935;
                    },
                    mod: function (a$1937, b$1938) {
                        return a$1937 % b$1938;
                    },
                    lt: function () {
                        var res$1939 = true;
                        for (var i$1940 = 0; i$1940 < arguments.length - 1; i$1940++) {
                            res$1939 = res$1939 && arguments[i$1940] < arguments[i$1940 + 1];
                            if (!res$1939)
                                break;
                        }
                        return res$1939;
                    },
                    gt: function () {
                        var res$1941 = true;
                        for (var i$1942 = 0; i$1942 < arguments.length - 1; i$1942++) {
                            res$1941 = res$1941 && arguments[i$1942] > arguments[i$1942 + 1];
                            if (!res$1941)
                                break;
                        }
                        return res$1941;
                    },
                    leq: function () {
                        var res$1943 = true;
                        for (var i$1944 = 0; i$1944 < arguments.length - 1; i$1944++) {
                            res$1943 = res$1943 && arguments[i$1944] <= arguments[i$1944 + 1];
                            if (!res$1943)
                                break;
                        }
                        return res$1943;
                    },
                    geq: function () {
                        var res$1945 = true;
                        for (var i$1946 = 0; i$1946 < arguments.length - 1; i$1946++) {
                            res$1945 = res$1945 && arguments[i$1946] >= arguments[i$1946 + 1];
                        }
                        return res$1945;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$1947) {
                        try {
                            return require('mori');
                        } catch (e$1948) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return clj_to_js(map(function foobar(x$1971) {
                return function () {
                    if (truthy(eq(x$1971, 1))) {
                        return x$1971;
                    }
                    return foobar(dec(x$1971));
                }.call(this);
            }, vector(1, 2, 3)));
        }()).to.eql([
            1,
            1,
            1
        ]);
    });
});
describe('interoperability', function () {
    it('should allow to call js within ki', function () {
        _ki = {
            init: function (self$2001, ns_name$2002) {
                if (_ki.namespaces[ns_name$2002] === undefined) {
                    _ki.namespaces[ns_name$2002] = { vars: {} };
                }
                self$2001._ki_ns_name = ns_name$2002;
                self$2001._ki_ns_ctx = self$2001;
                _ki.intern.bind(self$2001)(_ki.modules.core);
                _ki.intern.bind(self$2001)(_ki.modules.mori);
                _ki.intern.bind(self$2001)(_ki.modules);
                _ki.intern.bind(self$2001)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$2003) {
                for (var e$2004 in obj$2003) {
                    this[e$2004] = obj$2003[e$2004];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$2005) {
                        return x$2005 === false || x$2005 == null ? false : true;
                    },
                    falsey: function (x$2006) {
                        return !truthy(x$2006);
                    },
                    not: function (x$2007) {
                        return !truthy(x$2007);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$2008 = 0;
                        for (var i$2009 = 0; i$2009 < arguments.length; i$2009++) {
                            res$2008 += arguments[i$2009];
                        }
                        return res$2008;
                    },
                    sub: function () {
                        var res$2010 = arguments[0];
                        for (var i$2011 = 1; i$2011 < arguments.length; i$2011++) {
                            res$2010 -= arguments[i$2011];
                        }
                        return res$2010;
                    },
                    mul: function () {
                        var res$2012 = 1;
                        for (var i$2013 = 0; i$2013 < arguments.length; i$2013++) {
                            res$2012 *= arguments[i$2013];
                        }
                        return res$2012;
                    },
                    div: function () {
                        var res$2014 = arguments[0];
                        for (var i$2015 = 1; i$2015 < arguments.length; i$2015++) {
                            res$2014 /= arguments[i$2015];
                        }
                        return res$2014;
                    },
                    mod: function (a$2016, b$2017) {
                        return a$2016 % b$2017;
                    },
                    lt: function () {
                        var res$2018 = true;
                        for (var i$2019 = 0; i$2019 < arguments.length - 1; i$2019++) {
                            res$2018 = res$2018 && arguments[i$2019] < arguments[i$2019 + 1];
                            if (!res$2018)
                                break;
                        }
                        return res$2018;
                    },
                    gt: function () {
                        var res$2020 = true;
                        for (var i$2021 = 0; i$2021 < arguments.length - 1; i$2021++) {
                            res$2020 = res$2020 && arguments[i$2021] > arguments[i$2021 + 1];
                            if (!res$2020)
                                break;
                        }
                        return res$2020;
                    },
                    leq: function () {
                        var res$2022 = true;
                        for (var i$2023 = 0; i$2023 < arguments.length - 1; i$2023++) {
                            res$2022 = res$2022 && arguments[i$2023] <= arguments[i$2023 + 1];
                            if (!res$2022)
                                break;
                        }
                        return res$2022;
                    },
                    geq: function () {
                        var res$2024 = true;
                        for (var i$2025 = 0; i$2025 < arguments.length - 1; i$2025++) {
                            res$2024 = res$2024 && arguments[i$2025] >= arguments[i$2025 + 1];
                        }
                        return res$2024;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$2026) {
                        try {
                            return require('mori');
                        } catch (e$2027) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return clj_to_js(map(function (x$2050) {
                return x$2050 + 1;
            }, vector(1, 2, 3)));
        }()).to.eql([
            2,
            3,
            4
        ]);
    });
    it('should allow to pass a ki fn as a js callback', function () {
        _ki = {
            init: function (self$2053, ns_name$2054) {
                if (_ki.namespaces[ns_name$2054] === undefined) {
                    _ki.namespaces[ns_name$2054] = { vars: {} };
                }
                self$2053._ki_ns_name = ns_name$2054;
                self$2053._ki_ns_ctx = self$2053;
                _ki.intern.bind(self$2053)(_ki.modules.core);
                _ki.intern.bind(self$2053)(_ki.modules.mori);
                _ki.intern.bind(self$2053)(_ki.modules);
                _ki.intern.bind(self$2053)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$2055) {
                for (var e$2056 in obj$2055) {
                    this[e$2056] = obj$2055[e$2056];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$2057) {
                        return x$2057 === false || x$2057 == null ? false : true;
                    },
                    falsey: function (x$2058) {
                        return !truthy(x$2058);
                    },
                    not: function (x$2059) {
                        return !truthy(x$2059);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$2060 = 0;
                        for (var i$2061 = 0; i$2061 < arguments.length; i$2061++) {
                            res$2060 += arguments[i$2061];
                        }
                        return res$2060;
                    },
                    sub: function () {
                        var res$2062 = arguments[0];
                        for (var i$2063 = 1; i$2063 < arguments.length; i$2063++) {
                            res$2062 -= arguments[i$2063];
                        }
                        return res$2062;
                    },
                    mul: function () {
                        var res$2064 = 1;
                        for (var i$2065 = 0; i$2065 < arguments.length; i$2065++) {
                            res$2064 *= arguments[i$2065];
                        }
                        return res$2064;
                    },
                    div: function () {
                        var res$2066 = arguments[0];
                        for (var i$2067 = 1; i$2067 < arguments.length; i$2067++) {
                            res$2066 /= arguments[i$2067];
                        }
                        return res$2066;
                    },
                    mod: function (a$2068, b$2069) {
                        return a$2068 % b$2069;
                    },
                    lt: function () {
                        var res$2070 = true;
                        for (var i$2071 = 0; i$2071 < arguments.length - 1; i$2071++) {
                            res$2070 = res$2070 && arguments[i$2071] < arguments[i$2071 + 1];
                            if (!res$2070)
                                break;
                        }
                        return res$2070;
                    },
                    gt: function () {
                        var res$2072 = true;
                        for (var i$2073 = 0; i$2073 < arguments.length - 1; i$2073++) {
                            res$2072 = res$2072 && arguments[i$2073] > arguments[i$2073 + 1];
                            if (!res$2072)
                                break;
                        }
                        return res$2072;
                    },
                    leq: function () {
                        var res$2074 = true;
                        for (var i$2075 = 0; i$2075 < arguments.length - 1; i$2075++) {
                            res$2074 = res$2074 && arguments[i$2075] <= arguments[i$2075 + 1];
                            if (!res$2074)
                                break;
                        }
                        return res$2074;
                    },
                    geq: function () {
                        var res$2076 = true;
                        for (var i$2077 = 0; i$2077 < arguments.length - 1; i$2077++) {
                            res$2076 = res$2076 && arguments[i$2077] >= arguments[i$2077 + 1];
                        }
                        return res$2076;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$2078) {
                        try {
                            return require('mori');
                        } catch (e$2079) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466([
            1,
            2,
            3,
            4
        ].map(function () {
            _ki.init(this, '_ki');
            return function (x$2081) {
                return is_even(x$2081);
            };
        }())).to.eql([
            false,
            true,
            false,
            true
        ]);
    });
});
describe('local bindings and lexical scope', function () {
    it('should allow to define local bindings in a let form and ensure proper lexical scope', function () {
        _ki = {
            init: function (self$2095, ns_name$2096) {
                if (_ki.namespaces[ns_name$2096] === undefined) {
                    _ki.namespaces[ns_name$2096] = { vars: {} };
                }
                self$2095._ki_ns_name = ns_name$2096;
                self$2095._ki_ns_ctx = self$2095;
                _ki.intern.bind(self$2095)(_ki.modules.core);
                _ki.intern.bind(self$2095)(_ki.modules.mori);
                _ki.intern.bind(self$2095)(_ki.modules);
                _ki.intern.bind(self$2095)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$2097) {
                for (var e$2098 in obj$2097) {
                    this[e$2098] = obj$2097[e$2098];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$2099) {
                        return x$2099 === false || x$2099 == null ? false : true;
                    },
                    falsey: function (x$2100) {
                        return !truthy(x$2100);
                    },
                    not: function (x$2101) {
                        return !truthy(x$2101);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$2102 = 0;
                        for (var i$2103 = 0; i$2103 < arguments.length; i$2103++) {
                            res$2102 += arguments[i$2103];
                        }
                        return res$2102;
                    },
                    sub: function () {
                        var res$2104 = arguments[0];
                        for (var i$2105 = 1; i$2105 < arguments.length; i$2105++) {
                            res$2104 -= arguments[i$2105];
                        }
                        return res$2104;
                    },
                    mul: function () {
                        var res$2106 = 1;
                        for (var i$2107 = 0; i$2107 < arguments.length; i$2107++) {
                            res$2106 *= arguments[i$2107];
                        }
                        return res$2106;
                    },
                    div: function () {
                        var res$2108 = arguments[0];
                        for (var i$2109 = 1; i$2109 < arguments.length; i$2109++) {
                            res$2108 /= arguments[i$2109];
                        }
                        return res$2108;
                    },
                    mod: function (a$2110, b$2111) {
                        return a$2110 % b$2111;
                    },
                    lt: function () {
                        var res$2112 = true;
                        for (var i$2113 = 0; i$2113 < arguments.length - 1; i$2113++) {
                            res$2112 = res$2112 && arguments[i$2113] < arguments[i$2113 + 1];
                            if (!res$2112)
                                break;
                        }
                        return res$2112;
                    },
                    gt: function () {
                        var res$2114 = true;
                        for (var i$2115 = 0; i$2115 < arguments.length - 1; i$2115++) {
                            res$2114 = res$2114 && arguments[i$2115] > arguments[i$2115 + 1];
                            if (!res$2114)
                                break;
                        }
                        return res$2114;
                    },
                    leq: function () {
                        var res$2116 = true;
                        for (var i$2117 = 0; i$2117 < arguments.length - 1; i$2117++) {
                            res$2116 = res$2116 && arguments[i$2117] <= arguments[i$2117 + 1];
                            if (!res$2116)
                                break;
                        }
                        return res$2116;
                    },
                    geq: function () {
                        var res$2118 = true;
                        for (var i$2119 = 0; i$2119 < arguments.length - 1; i$2119++) {
                            res$2118 = res$2118 && arguments[i$2119] >= arguments[i$2119 + 1];
                        }
                        return res$2118;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$2120) {
                        try {
                            return require('mori');
                        } catch (e$2121) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return clj_to_js(function () {
                return function (a$2130) {
                    return function (b$2134) {
                        return vector(a$2130, b$2134);
                    }.call(this, 2);
                }.call(this, 1);
            }.call(this));
        }()).to.eql([
            1,
            2
        ]);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return clj_to_js(function () {
                return function (a$2154) {
                    return function () {
                        return function (a$2165) {
                            return function (b$2173) {
                                return vector(a$2165, b$2173);
                            }.call(this, inc(a$2165));
                        }.call(this, inc(a$2154));
                    }.call(this);
                }.call(this, 0);
            }.call(this));
        }()).to.eql([
            1,
            2
        ]);
        var c$2092 = { d: 1 };
        var mori$2093 = _ki.modules.mori;
        expect$1466(function () {
            _ki.init(this, '_ki');
            return function () {
                return function (a$2188) {
                    return function (b$2196) {
                        return function (e$2204) {
                            (function () {
                                return function (a$2228) {
                                    return function (b$2236) {
                                        return a$2228;
                                    }.call(this, inc(b$2196));
                                }.call(this, inc(a$2188));
                            }.call(this));
                            return vector(a$2188, b$2196, e$2204);
                        }.call(this, keyword('e'));
                    }.call(this, inc(a$2188));
                }.call(this, c$2092.d);
            }.call(this);
        }()).to.eql(mori$2093.vector(1, 2, mori$2093.keyword('e')));
    });
});
describe('namespaces', function () {
    it('should allow to define multiple namespaces and an anonymous namespace', function () {
        _ki = {
            init: function (self$2250, ns_name$2251) {
                if (_ki.namespaces[ns_name$2251] === undefined) {
                    _ki.namespaces[ns_name$2251] = { vars: {} };
                }
                self$2250._ki_ns_name = ns_name$2251;
                self$2250._ki_ns_ctx = self$2250;
                _ki.intern.bind(self$2250)(_ki.modules.core);
                _ki.intern.bind(self$2250)(_ki.modules.mori);
                _ki.intern.bind(self$2250)(_ki.modules);
                _ki.intern.bind(self$2250)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$2252) {
                for (var e$2253 in obj$2252) {
                    this[e$2253] = obj$2252[e$2253];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$2254) {
                        return x$2254 === false || x$2254 == null ? false : true;
                    },
                    falsey: function (x$2255) {
                        return !truthy(x$2255);
                    },
                    not: function (x$2256) {
                        return !truthy(x$2256);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$2257 = 0;
                        for (var i$2258 = 0; i$2258 < arguments.length; i$2258++) {
                            res$2257 += arguments[i$2258];
                        }
                        return res$2257;
                    },
                    sub: function () {
                        var res$2259 = arguments[0];
                        for (var i$2260 = 1; i$2260 < arguments.length; i$2260++) {
                            res$2259 -= arguments[i$2260];
                        }
                        return res$2259;
                    },
                    mul: function () {
                        var res$2261 = 1;
                        for (var i$2262 = 0; i$2262 < arguments.length; i$2262++) {
                            res$2261 *= arguments[i$2262];
                        }
                        return res$2261;
                    },
                    div: function () {
                        var res$2263 = arguments[0];
                        for (var i$2264 = 1; i$2264 < arguments.length; i$2264++) {
                            res$2263 /= arguments[i$2264];
                        }
                        return res$2263;
                    },
                    mod: function (a$2265, b$2266) {
                        return a$2265 % b$2266;
                    },
                    lt: function () {
                        var res$2267 = true;
                        for (var i$2268 = 0; i$2268 < arguments.length - 1; i$2268++) {
                            res$2267 = res$2267 && arguments[i$2268] < arguments[i$2268 + 1];
                            if (!res$2267)
                                break;
                        }
                        return res$2267;
                    },
                    gt: function () {
                        var res$2269 = true;
                        for (var i$2270 = 0; i$2270 < arguments.length - 1; i$2270++) {
                            res$2269 = res$2269 && arguments[i$2270] > arguments[i$2270 + 1];
                            if (!res$2269)
                                break;
                        }
                        return res$2269;
                    },
                    leq: function () {
                        var res$2271 = true;
                        for (var i$2272 = 0; i$2272 < arguments.length - 1; i$2272++) {
                            res$2271 = res$2271 && arguments[i$2272] <= arguments[i$2272 + 1];
                            if (!res$2271)
                                break;
                        }
                        return res$2271;
                    },
                    geq: function () {
                        var res$2273 = true;
                        for (var i$2274 = 0; i$2274 < arguments.length - 1; i$2274++) {
                            res$2273 = res$2273 && arguments[i$2274] >= arguments[i$2274 + 1];
                        }
                        return res$2273;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$2275) {
                        try {
                            return require('mori');
                        } catch (e$2276) {
                            return mori;
                        }
                    }
                }()
            }
        };
        (function () {
            _ki.init(this, '_ki');
            return function () {
                _ki_ns_ctx['a'] = 0;
                _ki.namespaces[_ki_ns_name].vars.a = _ki_ns_ctx['a'];
                return _ki_ns_ctx['a'];
            }();
        }());
        (function () {
            _ki.init(this, '_ki');
            return function () {
                _ki_ns_ctx['b'] = function (x$2285) {
                    return x$2285;
                };
                _ki.namespaces[_ki_ns_name].vars.b = _ki_ns_ctx['b'];
                return _ki_ns_ctx['b'];
            }();
        }());
        (function () {
            _ki.init(this, '_ki');
            return function () {
                _ki.init(this, 'foo');
                return function () {
                    _ki_ns_ctx['a'] = 1;
                    _ki.namespaces[_ki_ns_name].vars.a = _ki_ns_ctx['a'];
                    return _ki_ns_ctx['a'];
                }();
            }();
        }());
        (function () {
            _ki.init(this, '_ki');
            return function () {
                _ki.init(this, 'bar');
                return function () {
                    _ki_ns_ctx['a'] = 2;
                    _ki.namespaces[_ki_ns_name].vars.a = _ki_ns_ctx['a'];
                    return _ki_ns_ctx['a'];
                }();
            }();
        }());
        expect$1466(function () {
            _ki.init(this, '_ki');
            return identity(a);
        }()).to.eql(0);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return b(0);
        }()).to.eql(0);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return function () {
                _ki.init(this, 'foo');
                return a;
            }();
        }()).to.eql(1);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return function () {
                _ki.init(this, 'bar');
                return a;
            }();
        }()).to.eql(2);
    });
    it('should allow to use fully qualified identifiers', function () {
        _ki = {
            init: function (self$2330, ns_name$2331) {
                if (_ki.namespaces[ns_name$2331] === undefined) {
                    _ki.namespaces[ns_name$2331] = { vars: {} };
                }
                self$2330._ki_ns_name = ns_name$2331;
                self$2330._ki_ns_ctx = self$2330;
                _ki.intern.bind(self$2330)(_ki.modules.core);
                _ki.intern.bind(self$2330)(_ki.modules.mori);
                _ki.intern.bind(self$2330)(_ki.modules);
                _ki.intern.bind(self$2330)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$2332) {
                for (var e$2333 in obj$2332) {
                    this[e$2333] = obj$2332[e$2333];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$2334) {
                        return x$2334 === false || x$2334 == null ? false : true;
                    },
                    falsey: function (x$2335) {
                        return !truthy(x$2335);
                    },
                    not: function (x$2336) {
                        return !truthy(x$2336);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$2337 = 0;
                        for (var i$2338 = 0; i$2338 < arguments.length; i$2338++) {
                            res$2337 += arguments[i$2338];
                        }
                        return res$2337;
                    },
                    sub: function () {
                        var res$2339 = arguments[0];
                        for (var i$2340 = 1; i$2340 < arguments.length; i$2340++) {
                            res$2339 -= arguments[i$2340];
                        }
                        return res$2339;
                    },
                    mul: function () {
                        var res$2341 = 1;
                        for (var i$2342 = 0; i$2342 < arguments.length; i$2342++) {
                            res$2341 *= arguments[i$2342];
                        }
                        return res$2341;
                    },
                    div: function () {
                        var res$2343 = arguments[0];
                        for (var i$2344 = 1; i$2344 < arguments.length; i$2344++) {
                            res$2343 /= arguments[i$2344];
                        }
                        return res$2343;
                    },
                    mod: function (a$2345, b$2346) {
                        return a$2345 % b$2346;
                    },
                    lt: function () {
                        var res$2347 = true;
                        for (var i$2348 = 0; i$2348 < arguments.length - 1; i$2348++) {
                            res$2347 = res$2347 && arguments[i$2348] < arguments[i$2348 + 1];
                            if (!res$2347)
                                break;
                        }
                        return res$2347;
                    },
                    gt: function () {
                        var res$2349 = true;
                        for (var i$2350 = 0; i$2350 < arguments.length - 1; i$2350++) {
                            res$2349 = res$2349 && arguments[i$2350] > arguments[i$2350 + 1];
                            if (!res$2349)
                                break;
                        }
                        return res$2349;
                    },
                    leq: function () {
                        var res$2351 = true;
                        for (var i$2352 = 0; i$2352 < arguments.length - 1; i$2352++) {
                            res$2351 = res$2351 && arguments[i$2352] <= arguments[i$2352 + 1];
                            if (!res$2351)
                                break;
                        }
                        return res$2351;
                    },
                    geq: function () {
                        var res$2353 = true;
                        for (var i$2354 = 0; i$2354 < arguments.length - 1; i$2354++) {
                            res$2353 = res$2353 && arguments[i$2354] >= arguments[i$2354 + 1];
                        }
                        return res$2353;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$2355) {
                        try {
                            return require('mori');
                        } catch (e$2356) {
                            return mori;
                        }
                    }
                }()
            }
        };
        (function () {
            _ki.init(this, '_ki');
            return function () {
                _ki_ns_ctx['a'] = 0;
                _ki.namespaces[_ki_ns_name].vars.a = _ki_ns_ctx['a'];
                return _ki_ns_ctx['a'];
            }();
        }());
        (function () {
            _ki.init(this, '_ki');
            return function () {
                _ki.init(this, 'foo');
                return function () {
                    _ki_ns_ctx['a'] = 1;
                    _ki.namespaces[_ki_ns_name].vars.a = _ki_ns_ctx['a'];
                    return _ki_ns_ctx['a'];
                }();
            }();
        }());
        (function () {
            _ki.init(this, '_ki');
            return function () {
                _ki.init(this, 'bar');
                return function () {
                    _ki_ns_ctx['a'] = 2;
                    _ki.namespaces[_ki_ns_name].vars.a = _ki_ns_ctx['a'];
                    return _ki_ns_ctx['a'];
                }();
            }();
        }());
        expect$1466(function () {
            _ki.init(this, '_ki');
            return clj_to_js(vector(a, _ki.namespaces.foo.vars.a, _ki.namespaces.bar.vars.a));
        }()).to.eql([
            0,
            1,
            2
        ]);
    });
    it('should allow to intern modules', function () {
        _ki = {
            init: function (self$2396, ns_name$2397) {
                if (_ki.namespaces[ns_name$2397] === undefined) {
                    _ki.namespaces[ns_name$2397] = { vars: {} };
                }
                self$2396._ki_ns_name = ns_name$2397;
                self$2396._ki_ns_ctx = self$2396;
                _ki.intern.bind(self$2396)(_ki.modules.core);
                _ki.intern.bind(self$2396)(_ki.modules.mori);
                _ki.intern.bind(self$2396)(_ki.modules);
                _ki.intern.bind(self$2396)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$2398) {
                for (var e$2399 in obj$2398) {
                    this[e$2399] = obj$2398[e$2399];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$2400) {
                        return x$2400 === false || x$2400 == null ? false : true;
                    },
                    falsey: function (x$2401) {
                        return !truthy(x$2401);
                    },
                    not: function (x$2402) {
                        return !truthy(x$2402);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$2403 = 0;
                        for (var i$2404 = 0; i$2404 < arguments.length; i$2404++) {
                            res$2403 += arguments[i$2404];
                        }
                        return res$2403;
                    },
                    sub: function () {
                        var res$2405 = arguments[0];
                        for (var i$2406 = 1; i$2406 < arguments.length; i$2406++) {
                            res$2405 -= arguments[i$2406];
                        }
                        return res$2405;
                    },
                    mul: function () {
                        var res$2407 = 1;
                        for (var i$2408 = 0; i$2408 < arguments.length; i$2408++) {
                            res$2407 *= arguments[i$2408];
                        }
                        return res$2407;
                    },
                    div: function () {
                        var res$2409 = arguments[0];
                        for (var i$2410 = 1; i$2410 < arguments.length; i$2410++) {
                            res$2409 /= arguments[i$2410];
                        }
                        return res$2409;
                    },
                    mod: function (a$2411, b$2412) {
                        return a$2411 % b$2412;
                    },
                    lt: function () {
                        var res$2413 = true;
                        for (var i$2414 = 0; i$2414 < arguments.length - 1; i$2414++) {
                            res$2413 = res$2413 && arguments[i$2414] < arguments[i$2414 + 1];
                            if (!res$2413)
                                break;
                        }
                        return res$2413;
                    },
                    gt: function () {
                        var res$2415 = true;
                        for (var i$2416 = 0; i$2416 < arguments.length - 1; i$2416++) {
                            res$2415 = res$2415 && arguments[i$2416] > arguments[i$2416 + 1];
                            if (!res$2415)
                                break;
                        }
                        return res$2415;
                    },
                    leq: function () {
                        var res$2417 = true;
                        for (var i$2418 = 0; i$2418 < arguments.length - 1; i$2418++) {
                            res$2417 = res$2417 && arguments[i$2418] <= arguments[i$2418 + 1];
                            if (!res$2417)
                                break;
                        }
                        return res$2417;
                    },
                    geq: function () {
                        var res$2419 = true;
                        for (var i$2420 = 0; i$2420 < arguments.length - 1; i$2420++) {
                            res$2419 = res$2419 && arguments[i$2420] >= arguments[i$2420 + 1];
                        }
                        return res$2419;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$2421) {
                        try {
                            return require('mori');
                        } catch (e$2422) {
                            return mori;
                        }
                    }
                }()
            }
        };
        _ki.modules['amodule'] = {
            bar: function () {
                return 1;
            }
        };
        _ki.modules['bmodule'] = {
            baz: function () {
                return 2;
            }
        };
        (function () {
            _ki.init(this, '_ki');
            return function () {
                _ki.init(this, 'foo');
                return function () {
                    _ki.intern.bind(_ki_ns_ctx)(_ki.modules.amodule);
                    (function () {
                        _ki.intern.bind(_ki_ns_ctx)(_ki.modules.bmodule);
                        ;
                    }());
                }();
            }();
        }());
        expect$1466(function () {
            _ki.init(this, '_ki');
            return clj_to_js(function () {
                _ki.init(this, 'foo');
                return vector(bar(), baz());
            }());
        }()).to.eql([
            1,
            2
        ]);
    });
});
describe('truthiness', function () {
    it('should have truthy return false only for boolean false, nil (and js null and undefined)', function () {
        _ki = {
            init: function (self$2474, ns_name$2475) {
                if (_ki.namespaces[ns_name$2475] === undefined) {
                    _ki.namespaces[ns_name$2475] = { vars: {} };
                }
                self$2474._ki_ns_name = ns_name$2475;
                self$2474._ki_ns_ctx = self$2474;
                _ki.intern.bind(self$2474)(_ki.modules.core);
                _ki.intern.bind(self$2474)(_ki.modules.mori);
                _ki.intern.bind(self$2474)(_ki.modules);
                _ki.intern.bind(self$2474)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$2476) {
                for (var e$2477 in obj$2476) {
                    this[e$2477] = obj$2476[e$2477];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$2478) {
                        return x$2478 === false || x$2478 == null ? false : true;
                    },
                    falsey: function (x$2479) {
                        return !truthy(x$2479);
                    },
                    not: function (x$2480) {
                        return !truthy(x$2480);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$2481 = 0;
                        for (var i$2482 = 0; i$2482 < arguments.length; i$2482++) {
                            res$2481 += arguments[i$2482];
                        }
                        return res$2481;
                    },
                    sub: function () {
                        var res$2483 = arguments[0];
                        for (var i$2484 = 1; i$2484 < arguments.length; i$2484++) {
                            res$2483 -= arguments[i$2484];
                        }
                        return res$2483;
                    },
                    mul: function () {
                        var res$2485 = 1;
                        for (var i$2486 = 0; i$2486 < arguments.length; i$2486++) {
                            res$2485 *= arguments[i$2486];
                        }
                        return res$2485;
                    },
                    div: function () {
                        var res$2487 = arguments[0];
                        for (var i$2488 = 1; i$2488 < arguments.length; i$2488++) {
                            res$2487 /= arguments[i$2488];
                        }
                        return res$2487;
                    },
                    mod: function (a$2489, b$2490) {
                        return a$2489 % b$2490;
                    },
                    lt: function () {
                        var res$2491 = true;
                        for (var i$2492 = 0; i$2492 < arguments.length - 1; i$2492++) {
                            res$2491 = res$2491 && arguments[i$2492] < arguments[i$2492 + 1];
                            if (!res$2491)
                                break;
                        }
                        return res$2491;
                    },
                    gt: function () {
                        var res$2493 = true;
                        for (var i$2494 = 0; i$2494 < arguments.length - 1; i$2494++) {
                            res$2493 = res$2493 && arguments[i$2494] > arguments[i$2494 + 1];
                            if (!res$2493)
                                break;
                        }
                        return res$2493;
                    },
                    leq: function () {
                        var res$2495 = true;
                        for (var i$2496 = 0; i$2496 < arguments.length - 1; i$2496++) {
                            res$2495 = res$2495 && arguments[i$2496] <= arguments[i$2496 + 1];
                            if (!res$2495)
                                break;
                        }
                        return res$2495;
                    },
                    geq: function () {
                        var res$2497 = true;
                        for (var i$2498 = 0; i$2498 < arguments.length - 1; i$2498++) {
                            res$2497 = res$2497 && arguments[i$2498] >= arguments[i$2498 + 1];
                        }
                        return res$2497;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$2499) {
                        try {
                            return require('mori');
                        } catch (e$2500) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return truthy(false);
        }()).to.eql(false);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return truthy(null);
        }()).to.eql(false);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return truthy(null);
        }()).to.eql(false);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return truthy(undefined);
        }()).to.eql(false);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return truthy('');
        }()).to.eql(true);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return truthy(0);
        }()).to.eql(true);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return falsey(false);
        }()).to.eql(true);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return falsey(0);
        }()).to.eql(false);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return not(falsey(false));
        }()).to.eql(false);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return not(falsey(0));
        }()).to.eql(true);
    });
});
describe('logical operators', function () {
    it('should be consistent with definition of truthiness', function () {
        _ki = {
            init: function (self$2573, ns_name$2574) {
                if (_ki.namespaces[ns_name$2574] === undefined) {
                    _ki.namespaces[ns_name$2574] = { vars: {} };
                }
                self$2573._ki_ns_name = ns_name$2574;
                self$2573._ki_ns_ctx = self$2573;
                _ki.intern.bind(self$2573)(_ki.modules.core);
                _ki.intern.bind(self$2573)(_ki.modules.mori);
                _ki.intern.bind(self$2573)(_ki.modules);
                _ki.intern.bind(self$2573)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$2575) {
                for (var e$2576 in obj$2575) {
                    this[e$2576] = obj$2575[e$2576];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$2577) {
                        return x$2577 === false || x$2577 == null ? false : true;
                    },
                    falsey: function (x$2578) {
                        return !truthy(x$2578);
                    },
                    not: function (x$2579) {
                        return !truthy(x$2579);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$2580 = 0;
                        for (var i$2581 = 0; i$2581 < arguments.length; i$2581++) {
                            res$2580 += arguments[i$2581];
                        }
                        return res$2580;
                    },
                    sub: function () {
                        var res$2582 = arguments[0];
                        for (var i$2583 = 1; i$2583 < arguments.length; i$2583++) {
                            res$2582 -= arguments[i$2583];
                        }
                        return res$2582;
                    },
                    mul: function () {
                        var res$2584 = 1;
                        for (var i$2585 = 0; i$2585 < arguments.length; i$2585++) {
                            res$2584 *= arguments[i$2585];
                        }
                        return res$2584;
                    },
                    div: function () {
                        var res$2586 = arguments[0];
                        for (var i$2587 = 1; i$2587 < arguments.length; i$2587++) {
                            res$2586 /= arguments[i$2587];
                        }
                        return res$2586;
                    },
                    mod: function (a$2588, b$2589) {
                        return a$2588 % b$2589;
                    },
                    lt: function () {
                        var res$2590 = true;
                        for (var i$2591 = 0; i$2591 < arguments.length - 1; i$2591++) {
                            res$2590 = res$2590 && arguments[i$2591] < arguments[i$2591 + 1];
                            if (!res$2590)
                                break;
                        }
                        return res$2590;
                    },
                    gt: function () {
                        var res$2592 = true;
                        for (var i$2593 = 0; i$2593 < arguments.length - 1; i$2593++) {
                            res$2592 = res$2592 && arguments[i$2593] > arguments[i$2593 + 1];
                            if (!res$2592)
                                break;
                        }
                        return res$2592;
                    },
                    leq: function () {
                        var res$2594 = true;
                        for (var i$2595 = 0; i$2595 < arguments.length - 1; i$2595++) {
                            res$2594 = res$2594 && arguments[i$2595] <= arguments[i$2595 + 1];
                            if (!res$2594)
                                break;
                        }
                        return res$2594;
                    },
                    geq: function () {
                        var res$2596 = true;
                        for (var i$2597 = 0; i$2597 < arguments.length - 1; i$2597++) {
                            res$2596 = res$2596 && arguments[i$2597] >= arguments[i$2597 + 1];
                        }
                        return res$2596;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$2598) {
                        try {
                            return require('mori');
                        } catch (e$2599) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return truthy('') && truthy(0);
        }()).to.eql(true);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return truthy('') && truthy(0) && truthy(null);
        }()).to.eql(false);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return truthy('') || truthy(0);
        }()).to.eql(true);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return truthy(false) || truthy(null);
        }()).to.eql(false);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return truthy('') && truthy(not(truthy(false) || truthy(null))) && truthy(0);
        }()).to.eql(true);
    });
    it('should short circuit', function () {
        _ki = {
            init: function (self$2703, ns_name$2704) {
                if (_ki.namespaces[ns_name$2704] === undefined) {
                    _ki.namespaces[ns_name$2704] = { vars: {} };
                }
                self$2703._ki_ns_name = ns_name$2704;
                self$2703._ki_ns_ctx = self$2703;
                _ki.intern.bind(self$2703)(_ki.modules.core);
                _ki.intern.bind(self$2703)(_ki.modules.mori);
                _ki.intern.bind(self$2703)(_ki.modules);
                _ki.intern.bind(self$2703)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$2705) {
                for (var e$2706 in obj$2705) {
                    this[e$2706] = obj$2705[e$2706];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$2707) {
                        return x$2707 === false || x$2707 == null ? false : true;
                    },
                    falsey: function (x$2708) {
                        return !truthy(x$2708);
                    },
                    not: function (x$2709) {
                        return !truthy(x$2709);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$2710 = 0;
                        for (var i$2711 = 0; i$2711 < arguments.length; i$2711++) {
                            res$2710 += arguments[i$2711];
                        }
                        return res$2710;
                    },
                    sub: function () {
                        var res$2712 = arguments[0];
                        for (var i$2713 = 1; i$2713 < arguments.length; i$2713++) {
                            res$2712 -= arguments[i$2713];
                        }
                        return res$2712;
                    },
                    mul: function () {
                        var res$2714 = 1;
                        for (var i$2715 = 0; i$2715 < arguments.length; i$2715++) {
                            res$2714 *= arguments[i$2715];
                        }
                        return res$2714;
                    },
                    div: function () {
                        var res$2716 = arguments[0];
                        for (var i$2717 = 1; i$2717 < arguments.length; i$2717++) {
                            res$2716 /= arguments[i$2717];
                        }
                        return res$2716;
                    },
                    mod: function (a$2718, b$2719) {
                        return a$2718 % b$2719;
                    },
                    lt: function () {
                        var res$2720 = true;
                        for (var i$2721 = 0; i$2721 < arguments.length - 1; i$2721++) {
                            res$2720 = res$2720 && arguments[i$2721] < arguments[i$2721 + 1];
                            if (!res$2720)
                                break;
                        }
                        return res$2720;
                    },
                    gt: function () {
                        var res$2722 = true;
                        for (var i$2723 = 0; i$2723 < arguments.length - 1; i$2723++) {
                            res$2722 = res$2722 && arguments[i$2723] > arguments[i$2723 + 1];
                            if (!res$2722)
                                break;
                        }
                        return res$2722;
                    },
                    leq: function () {
                        var res$2724 = true;
                        for (var i$2725 = 0; i$2725 < arguments.length - 1; i$2725++) {
                            res$2724 = res$2724 && arguments[i$2725] <= arguments[i$2725 + 1];
                            if (!res$2724)
                                break;
                        }
                        return res$2724;
                    },
                    geq: function () {
                        var res$2726 = true;
                        for (var i$2727 = 0; i$2727 < arguments.length - 1; i$2727++) {
                            res$2726 = res$2726 && arguments[i$2727] >= arguments[i$2727 + 1];
                        }
                        return res$2726;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$2728) {
                        try {
                            return require('mori');
                        } catch (e$2729) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return truthy(true) && truthy(false) && truthy(undefined_symbol);
        }()).to.eql(false);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return truthy(false) || truthy(true) || truthy(undefined_symbol);
        }()).to.eql(true);
    });
});
describe('equality', function () {
    it('should operate on deep data structures', function () {
        _ki = {
            init: function (self$2776, ns_name$2777) {
                if (_ki.namespaces[ns_name$2777] === undefined) {
                    _ki.namespaces[ns_name$2777] = { vars: {} };
                }
                self$2776._ki_ns_name = ns_name$2777;
                self$2776._ki_ns_ctx = self$2776;
                _ki.intern.bind(self$2776)(_ki.modules.core);
                _ki.intern.bind(self$2776)(_ki.modules.mori);
                _ki.intern.bind(self$2776)(_ki.modules);
                _ki.intern.bind(self$2776)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$2778) {
                for (var e$2779 in obj$2778) {
                    this[e$2779] = obj$2778[e$2779];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$2780) {
                        return x$2780 === false || x$2780 == null ? false : true;
                    },
                    falsey: function (x$2781) {
                        return !truthy(x$2781);
                    },
                    not: function (x$2782) {
                        return !truthy(x$2782);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$2783 = 0;
                        for (var i$2784 = 0; i$2784 < arguments.length; i$2784++) {
                            res$2783 += arguments[i$2784];
                        }
                        return res$2783;
                    },
                    sub: function () {
                        var res$2785 = arguments[0];
                        for (var i$2786 = 1; i$2786 < arguments.length; i$2786++) {
                            res$2785 -= arguments[i$2786];
                        }
                        return res$2785;
                    },
                    mul: function () {
                        var res$2787 = 1;
                        for (var i$2788 = 0; i$2788 < arguments.length; i$2788++) {
                            res$2787 *= arguments[i$2788];
                        }
                        return res$2787;
                    },
                    div: function () {
                        var res$2789 = arguments[0];
                        for (var i$2790 = 1; i$2790 < arguments.length; i$2790++) {
                            res$2789 /= arguments[i$2790];
                        }
                        return res$2789;
                    },
                    mod: function (a$2791, b$2792) {
                        return a$2791 % b$2792;
                    },
                    lt: function () {
                        var res$2793 = true;
                        for (var i$2794 = 0; i$2794 < arguments.length - 1; i$2794++) {
                            res$2793 = res$2793 && arguments[i$2794] < arguments[i$2794 + 1];
                            if (!res$2793)
                                break;
                        }
                        return res$2793;
                    },
                    gt: function () {
                        var res$2795 = true;
                        for (var i$2796 = 0; i$2796 < arguments.length - 1; i$2796++) {
                            res$2795 = res$2795 && arguments[i$2796] > arguments[i$2796 + 1];
                            if (!res$2795)
                                break;
                        }
                        return res$2795;
                    },
                    leq: function () {
                        var res$2797 = true;
                        for (var i$2798 = 0; i$2798 < arguments.length - 1; i$2798++) {
                            res$2797 = res$2797 && arguments[i$2798] <= arguments[i$2798 + 1];
                            if (!res$2797)
                                break;
                        }
                        return res$2797;
                    },
                    geq: function () {
                        var res$2799 = true;
                        for (var i$2800 = 0; i$2800 < arguments.length - 1; i$2800++) {
                            res$2799 = res$2799 && arguments[i$2800] >= arguments[i$2800 + 1];
                        }
                        return res$2799;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$2801) {
                        try {
                            return require('mori');
                        } catch (e$2802) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return eq(hash_map('a', 1, 'b', vector(hash_map('c', 1), 2)), hash_map('a', 1, 'b', vector(hash_map('c', 1), 2)));
        }()).to.eql(true);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return eq(hash_map('a', 1, 'b', vector(hash_map('c', 3), 2)), hash_map('a', 1, 'b', vector(hash_map('c', 1), 2)));
        }()).to.eql(false);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return neq(hash_map('a', 1, 'b', vector(hash_map('c', 3), 2)), hash_map('a', 1, 'b', vector(hash_map('c', 1), 2)));
        }()).to.eql(true);
    });
});
describe('flow control', function () {
    it('should allow branching consistently with definition of truthiness', function () {
        _ki = {
            init: function (self$3017, ns_name$3018) {
                if (_ki.namespaces[ns_name$3018] === undefined) {
                    _ki.namespaces[ns_name$3018] = { vars: {} };
                }
                self$3017._ki_ns_name = ns_name$3018;
                self$3017._ki_ns_ctx = self$3017;
                _ki.intern.bind(self$3017)(_ki.modules.core);
                _ki.intern.bind(self$3017)(_ki.modules.mori);
                _ki.intern.bind(self$3017)(_ki.modules);
                _ki.intern.bind(self$3017)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$3019) {
                for (var e$3020 in obj$3019) {
                    this[e$3020] = obj$3019[e$3020];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$3021) {
                        return x$3021 === false || x$3021 == null ? false : true;
                    },
                    falsey: function (x$3022) {
                        return !truthy(x$3022);
                    },
                    not: function (x$3023) {
                        return !truthy(x$3023);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$3024 = 0;
                        for (var i$3025 = 0; i$3025 < arguments.length; i$3025++) {
                            res$3024 += arguments[i$3025];
                        }
                        return res$3024;
                    },
                    sub: function () {
                        var res$3026 = arguments[0];
                        for (var i$3027 = 1; i$3027 < arguments.length; i$3027++) {
                            res$3026 -= arguments[i$3027];
                        }
                        return res$3026;
                    },
                    mul: function () {
                        var res$3028 = 1;
                        for (var i$3029 = 0; i$3029 < arguments.length; i$3029++) {
                            res$3028 *= arguments[i$3029];
                        }
                        return res$3028;
                    },
                    div: function () {
                        var res$3030 = arguments[0];
                        for (var i$3031 = 1; i$3031 < arguments.length; i$3031++) {
                            res$3030 /= arguments[i$3031];
                        }
                        return res$3030;
                    },
                    mod: function (a$3032, b$3033) {
                        return a$3032 % b$3033;
                    },
                    lt: function () {
                        var res$3034 = true;
                        for (var i$3035 = 0; i$3035 < arguments.length - 1; i$3035++) {
                            res$3034 = res$3034 && arguments[i$3035] < arguments[i$3035 + 1];
                            if (!res$3034)
                                break;
                        }
                        return res$3034;
                    },
                    gt: function () {
                        var res$3036 = true;
                        for (var i$3037 = 0; i$3037 < arguments.length - 1; i$3037++) {
                            res$3036 = res$3036 && arguments[i$3037] > arguments[i$3037 + 1];
                            if (!res$3036)
                                break;
                        }
                        return res$3036;
                    },
                    leq: function () {
                        var res$3038 = true;
                        for (var i$3039 = 0; i$3039 < arguments.length - 1; i$3039++) {
                            res$3038 = res$3038 && arguments[i$3039] <= arguments[i$3039 + 1];
                            if (!res$3038)
                                break;
                        }
                        return res$3038;
                    },
                    geq: function () {
                        var res$3040 = true;
                        for (var i$3041 = 0; i$3041 < arguments.length - 1; i$3041++) {
                            res$3040 = res$3040 && arguments[i$3041] >= arguments[i$3041 + 1];
                        }
                        return res$3040;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$3042) {
                        try {
                            return require('mori');
                        } catch (e$3043) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return function () {
                if (truthy(eq(1, 1))) {
                    return 'foo';
                }
                return;
            }.call(this);
        }()).to.eql('foo');
        expect$1466(function () {
            _ki.init(this, '_ki');
            return function () {
                if (truthy(not(eq(1, 2)))) {
                    return 'foo';
                }
                return;
            }.call(this);
        }()).to.eql('foo');
        expect$1466(function () {
            _ki.init(this, '_ki');
            return function () {
                if (truthy('')) {
                    return 'foo';
                }
                return 'bar';
            }.call(this);
        }()).to.eql('foo');
        expect$1466(function () {
            _ki.init(this, '_ki');
            return function () {
                if (truthy(0)) {
                    return 'foo';
                }
                return 'bar';
            }.call(this);
        }()).to.eql('foo');
        expect$1466(function () {
            _ki.init(this, '_ki');
            return function () {
                if (truthy(null)) {
                    return 'foo';
                }
                return 'bar';
            }.call(this);
        }()).to.eql('bar');
        expect$1466(function () {
            _ki.init(this, '_ki');
            return function () {
                if (truthy(not(''))) {
                    return 'foo';
                }
                return 'bar';
            }.call(this);
        }()).to.eql('bar');
    });
    it('should have cond be consistent with definition of truthiness', function () {
        _ki = {
            init: function (self$3133, ns_name$3134) {
                if (_ki.namespaces[ns_name$3134] === undefined) {
                    _ki.namespaces[ns_name$3134] = { vars: {} };
                }
                self$3133._ki_ns_name = ns_name$3134;
                self$3133._ki_ns_ctx = self$3133;
                _ki.intern.bind(self$3133)(_ki.modules.core);
                _ki.intern.bind(self$3133)(_ki.modules.mori);
                _ki.intern.bind(self$3133)(_ki.modules);
                _ki.intern.bind(self$3133)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$3135) {
                for (var e$3136 in obj$3135) {
                    this[e$3136] = obj$3135[e$3136];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$3137) {
                        return x$3137 === false || x$3137 == null ? false : true;
                    },
                    falsey: function (x$3138) {
                        return !truthy(x$3138);
                    },
                    not: function (x$3139) {
                        return !truthy(x$3139);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$3140 = 0;
                        for (var i$3141 = 0; i$3141 < arguments.length; i$3141++) {
                            res$3140 += arguments[i$3141];
                        }
                        return res$3140;
                    },
                    sub: function () {
                        var res$3142 = arguments[0];
                        for (var i$3143 = 1; i$3143 < arguments.length; i$3143++) {
                            res$3142 -= arguments[i$3143];
                        }
                        return res$3142;
                    },
                    mul: function () {
                        var res$3144 = 1;
                        for (var i$3145 = 0; i$3145 < arguments.length; i$3145++) {
                            res$3144 *= arguments[i$3145];
                        }
                        return res$3144;
                    },
                    div: function () {
                        var res$3146 = arguments[0];
                        for (var i$3147 = 1; i$3147 < arguments.length; i$3147++) {
                            res$3146 /= arguments[i$3147];
                        }
                        return res$3146;
                    },
                    mod: function (a$3148, b$3149) {
                        return a$3148 % b$3149;
                    },
                    lt: function () {
                        var res$3150 = true;
                        for (var i$3151 = 0; i$3151 < arguments.length - 1; i$3151++) {
                            res$3150 = res$3150 && arguments[i$3151] < arguments[i$3151 + 1];
                            if (!res$3150)
                                break;
                        }
                        return res$3150;
                    },
                    gt: function () {
                        var res$3152 = true;
                        for (var i$3153 = 0; i$3153 < arguments.length - 1; i$3153++) {
                            res$3152 = res$3152 && arguments[i$3153] > arguments[i$3153 + 1];
                            if (!res$3152)
                                break;
                        }
                        return res$3152;
                    },
                    leq: function () {
                        var res$3154 = true;
                        for (var i$3155 = 0; i$3155 < arguments.length - 1; i$3155++) {
                            res$3154 = res$3154 && arguments[i$3155] <= arguments[i$3155 + 1];
                            if (!res$3154)
                                break;
                        }
                        return res$3154;
                    },
                    geq: function () {
                        var res$3156 = true;
                        for (var i$3157 = 0; i$3157 < arguments.length - 1; i$3157++) {
                            res$3156 = res$3156 && arguments[i$3157] >= arguments[i$3157 + 1];
                        }
                        return res$3156;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$3158) {
                        try {
                            return require('mori');
                        } catch (e$3159) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return function () {
                if (truthy(eq(1, 2))) {
                    return 'foo';
                }
                return function () {
                    if (truthy(null)) {
                        return 'bar';
                    }
                    return function () {
                        if (truthy('')) {
                            return 'baz';
                        }
                        return undefined;
                    }.call(this);
                }.call(this);
            }.call(this);
        }()).to.eql('baz');
        expect$1466(function () {
            _ki.init(this, '_ki');
            return function () {
                if (truthy(eq(1, 2))) {
                    return 'foo';
                }
                return function () {
                    if (truthy(null)) {
                        return 'bar';
                    }
                    return function () {
                        if (truthy(keyword('else'))) {
                            return 'baz';
                        }
                        return undefined;
                    }.call(this);
                }.call(this);
            }.call(this);
        }()).to.eql('baz');
    });
    it('should have cond short circuit', function () {
        _ki = {
            init: function (self$3236, ns_name$3237) {
                if (_ki.namespaces[ns_name$3237] === undefined) {
                    _ki.namespaces[ns_name$3237] = { vars: {} };
                }
                self$3236._ki_ns_name = ns_name$3237;
                self$3236._ki_ns_ctx = self$3236;
                _ki.intern.bind(self$3236)(_ki.modules.core);
                _ki.intern.bind(self$3236)(_ki.modules.mori);
                _ki.intern.bind(self$3236)(_ki.modules);
                _ki.intern.bind(self$3236)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$3238) {
                for (var e$3239 in obj$3238) {
                    this[e$3239] = obj$3238[e$3239];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$3240) {
                        return x$3240 === false || x$3240 == null ? false : true;
                    },
                    falsey: function (x$3241) {
                        return !truthy(x$3241);
                    },
                    not: function (x$3242) {
                        return !truthy(x$3242);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$3243 = 0;
                        for (var i$3244 = 0; i$3244 < arguments.length; i$3244++) {
                            res$3243 += arguments[i$3244];
                        }
                        return res$3243;
                    },
                    sub: function () {
                        var res$3245 = arguments[0];
                        for (var i$3246 = 1; i$3246 < arguments.length; i$3246++) {
                            res$3245 -= arguments[i$3246];
                        }
                        return res$3245;
                    },
                    mul: function () {
                        var res$3247 = 1;
                        for (var i$3248 = 0; i$3248 < arguments.length; i$3248++) {
                            res$3247 *= arguments[i$3248];
                        }
                        return res$3247;
                    },
                    div: function () {
                        var res$3249 = arguments[0];
                        for (var i$3250 = 1; i$3250 < arguments.length; i$3250++) {
                            res$3249 /= arguments[i$3250];
                        }
                        return res$3249;
                    },
                    mod: function (a$3251, b$3252) {
                        return a$3251 % b$3252;
                    },
                    lt: function () {
                        var res$3253 = true;
                        for (var i$3254 = 0; i$3254 < arguments.length - 1; i$3254++) {
                            res$3253 = res$3253 && arguments[i$3254] < arguments[i$3254 + 1];
                            if (!res$3253)
                                break;
                        }
                        return res$3253;
                    },
                    gt: function () {
                        var res$3255 = true;
                        for (var i$3256 = 0; i$3256 < arguments.length - 1; i$3256++) {
                            res$3255 = res$3255 && arguments[i$3256] > arguments[i$3256 + 1];
                            if (!res$3255)
                                break;
                        }
                        return res$3255;
                    },
                    leq: function () {
                        var res$3257 = true;
                        for (var i$3258 = 0; i$3258 < arguments.length - 1; i$3258++) {
                            res$3257 = res$3257 && arguments[i$3258] <= arguments[i$3258 + 1];
                            if (!res$3257)
                                break;
                        }
                        return res$3257;
                    },
                    geq: function () {
                        var res$3259 = true;
                        for (var i$3260 = 0; i$3260 < arguments.length - 1; i$3260++) {
                            res$3259 = res$3259 && arguments[i$3260] >= arguments[i$3260 + 1];
                        }
                        return res$3259;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$3261) {
                        try {
                            return require('mori');
                        } catch (e$3262) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return function () {
                if (truthy(eq(1, 2))) {
                    return 'foo';
                }
                return function () {
                    if (truthy(true)) {
                        return 'bar';
                    }
                    return function () {
                        if (truthy(undefined_symbol)) {
                            return 'baz';
                        }
                        return undefined;
                    }.call(this);
                }.call(this);
            }.call(this);
        }()).to.eql('bar');
    });
});
describe('data literals', function () {
    it('should allow to create vectors', function () {
        _ki = {
            init: function (self$3300, ns_name$3301) {
                if (_ki.namespaces[ns_name$3301] === undefined) {
                    _ki.namespaces[ns_name$3301] = { vars: {} };
                }
                self$3300._ki_ns_name = ns_name$3301;
                self$3300._ki_ns_ctx = self$3300;
                _ki.intern.bind(self$3300)(_ki.modules.core);
                _ki.intern.bind(self$3300)(_ki.modules.mori);
                _ki.intern.bind(self$3300)(_ki.modules);
                _ki.intern.bind(self$3300)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$3302) {
                for (var e$3303 in obj$3302) {
                    this[e$3303] = obj$3302[e$3303];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$3304) {
                        return x$3304 === false || x$3304 == null ? false : true;
                    },
                    falsey: function (x$3305) {
                        return !truthy(x$3305);
                    },
                    not: function (x$3306) {
                        return !truthy(x$3306);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$3307 = 0;
                        for (var i$3308 = 0; i$3308 < arguments.length; i$3308++) {
                            res$3307 += arguments[i$3308];
                        }
                        return res$3307;
                    },
                    sub: function () {
                        var res$3309 = arguments[0];
                        for (var i$3310 = 1; i$3310 < arguments.length; i$3310++) {
                            res$3309 -= arguments[i$3310];
                        }
                        return res$3309;
                    },
                    mul: function () {
                        var res$3311 = 1;
                        for (var i$3312 = 0; i$3312 < arguments.length; i$3312++) {
                            res$3311 *= arguments[i$3312];
                        }
                        return res$3311;
                    },
                    div: function () {
                        var res$3313 = arguments[0];
                        for (var i$3314 = 1; i$3314 < arguments.length; i$3314++) {
                            res$3313 /= arguments[i$3314];
                        }
                        return res$3313;
                    },
                    mod: function (a$3315, b$3316) {
                        return a$3315 % b$3316;
                    },
                    lt: function () {
                        var res$3317 = true;
                        for (var i$3318 = 0; i$3318 < arguments.length - 1; i$3318++) {
                            res$3317 = res$3317 && arguments[i$3318] < arguments[i$3318 + 1];
                            if (!res$3317)
                                break;
                        }
                        return res$3317;
                    },
                    gt: function () {
                        var res$3319 = true;
                        for (var i$3320 = 0; i$3320 < arguments.length - 1; i$3320++) {
                            res$3319 = res$3319 && arguments[i$3320] > arguments[i$3320 + 1];
                            if (!res$3319)
                                break;
                        }
                        return res$3319;
                    },
                    leq: function () {
                        var res$3321 = true;
                        for (var i$3322 = 0; i$3322 < arguments.length - 1; i$3322++) {
                            res$3321 = res$3321 && arguments[i$3322] <= arguments[i$3322 + 1];
                            if (!res$3321)
                                break;
                        }
                        return res$3321;
                    },
                    geq: function () {
                        var res$3323 = true;
                        for (var i$3324 = 0; i$3324 < arguments.length - 1; i$3324++) {
                            res$3323 = res$3323 && arguments[i$3324] >= arguments[i$3324 + 1];
                        }
                        return res$3323;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$3325) {
                        try {
                            return require('mori');
                        } catch (e$3326) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return eq(vector(1, 2, 3, 4), vector(1, 2, 3, 4));
        }()).to.eql(true);
    });
    it('should allow to create hash maps', function () {
        _ki = {
            init: function (self$3365, ns_name$3366) {
                if (_ki.namespaces[ns_name$3366] === undefined) {
                    _ki.namespaces[ns_name$3366] = { vars: {} };
                }
                self$3365._ki_ns_name = ns_name$3366;
                self$3365._ki_ns_ctx = self$3365;
                _ki.intern.bind(self$3365)(_ki.modules.core);
                _ki.intern.bind(self$3365)(_ki.modules.mori);
                _ki.intern.bind(self$3365)(_ki.modules);
                _ki.intern.bind(self$3365)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$3367) {
                for (var e$3368 in obj$3367) {
                    this[e$3368] = obj$3367[e$3368];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$3369) {
                        return x$3369 === false || x$3369 == null ? false : true;
                    },
                    falsey: function (x$3370) {
                        return !truthy(x$3370);
                    },
                    not: function (x$3371) {
                        return !truthy(x$3371);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$3372 = 0;
                        for (var i$3373 = 0; i$3373 < arguments.length; i$3373++) {
                            res$3372 += arguments[i$3373];
                        }
                        return res$3372;
                    },
                    sub: function () {
                        var res$3374 = arguments[0];
                        for (var i$3375 = 1; i$3375 < arguments.length; i$3375++) {
                            res$3374 -= arguments[i$3375];
                        }
                        return res$3374;
                    },
                    mul: function () {
                        var res$3376 = 1;
                        for (var i$3377 = 0; i$3377 < arguments.length; i$3377++) {
                            res$3376 *= arguments[i$3377];
                        }
                        return res$3376;
                    },
                    div: function () {
                        var res$3378 = arguments[0];
                        for (var i$3379 = 1; i$3379 < arguments.length; i$3379++) {
                            res$3378 /= arguments[i$3379];
                        }
                        return res$3378;
                    },
                    mod: function (a$3380, b$3381) {
                        return a$3380 % b$3381;
                    },
                    lt: function () {
                        var res$3382 = true;
                        for (var i$3383 = 0; i$3383 < arguments.length - 1; i$3383++) {
                            res$3382 = res$3382 && arguments[i$3383] < arguments[i$3383 + 1];
                            if (!res$3382)
                                break;
                        }
                        return res$3382;
                    },
                    gt: function () {
                        var res$3384 = true;
                        for (var i$3385 = 0; i$3385 < arguments.length - 1; i$3385++) {
                            res$3384 = res$3384 && arguments[i$3385] > arguments[i$3385 + 1];
                            if (!res$3384)
                                break;
                        }
                        return res$3384;
                    },
                    leq: function () {
                        var res$3386 = true;
                        for (var i$3387 = 0; i$3387 < arguments.length - 1; i$3387++) {
                            res$3386 = res$3386 && arguments[i$3387] <= arguments[i$3387 + 1];
                            if (!res$3386)
                                break;
                        }
                        return res$3386;
                    },
                    geq: function () {
                        var res$3388 = true;
                        for (var i$3389 = 0; i$3389 < arguments.length - 1; i$3389++) {
                            res$3388 = res$3388 && arguments[i$3389] >= arguments[i$3389 + 1];
                        }
                        return res$3388;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$3390) {
                        try {
                            return require('mori');
                        } catch (e$3391) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return eq(hash_map('a', 2, 'b', 4), hash_map('a', 2, 'b', 4));
        }()).to.eql(true);
    });
    it('should allow to create hash maps and evaluate forms', function () {
        _ki = {
            init: function (self$3430, ns_name$3431) {
                if (_ki.namespaces[ns_name$3431] === undefined) {
                    _ki.namespaces[ns_name$3431] = { vars: {} };
                }
                self$3430._ki_ns_name = ns_name$3431;
                self$3430._ki_ns_ctx = self$3430;
                _ki.intern.bind(self$3430)(_ki.modules.core);
                _ki.intern.bind(self$3430)(_ki.modules.mori);
                _ki.intern.bind(self$3430)(_ki.modules);
                _ki.intern.bind(self$3430)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$3432) {
                for (var e$3433 in obj$3432) {
                    this[e$3433] = obj$3432[e$3433];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$3434) {
                        return x$3434 === false || x$3434 == null ? false : true;
                    },
                    falsey: function (x$3435) {
                        return !truthy(x$3435);
                    },
                    not: function (x$3436) {
                        return !truthy(x$3436);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$3437 = 0;
                        for (var i$3438 = 0; i$3438 < arguments.length; i$3438++) {
                            res$3437 += arguments[i$3438];
                        }
                        return res$3437;
                    },
                    sub: function () {
                        var res$3439 = arguments[0];
                        for (var i$3440 = 1; i$3440 < arguments.length; i$3440++) {
                            res$3439 -= arguments[i$3440];
                        }
                        return res$3439;
                    },
                    mul: function () {
                        var res$3441 = 1;
                        for (var i$3442 = 0; i$3442 < arguments.length; i$3442++) {
                            res$3441 *= arguments[i$3442];
                        }
                        return res$3441;
                    },
                    div: function () {
                        var res$3443 = arguments[0];
                        for (var i$3444 = 1; i$3444 < arguments.length; i$3444++) {
                            res$3443 /= arguments[i$3444];
                        }
                        return res$3443;
                    },
                    mod: function (a$3445, b$3446) {
                        return a$3445 % b$3446;
                    },
                    lt: function () {
                        var res$3447 = true;
                        for (var i$3448 = 0; i$3448 < arguments.length - 1; i$3448++) {
                            res$3447 = res$3447 && arguments[i$3448] < arguments[i$3448 + 1];
                            if (!res$3447)
                                break;
                        }
                        return res$3447;
                    },
                    gt: function () {
                        var res$3449 = true;
                        for (var i$3450 = 0; i$3450 < arguments.length - 1; i$3450++) {
                            res$3449 = res$3449 && arguments[i$3450] > arguments[i$3450 + 1];
                            if (!res$3449)
                                break;
                        }
                        return res$3449;
                    },
                    leq: function () {
                        var res$3451 = true;
                        for (var i$3452 = 0; i$3452 < arguments.length - 1; i$3452++) {
                            res$3451 = res$3451 && arguments[i$3452] <= arguments[i$3452 + 1];
                            if (!res$3451)
                                break;
                        }
                        return res$3451;
                    },
                    geq: function () {
                        var res$3453 = true;
                        for (var i$3454 = 0; i$3454 < arguments.length - 1; i$3454++) {
                            res$3453 = res$3453 && arguments[i$3454] >= arguments[i$3454 + 1];
                        }
                        return res$3453;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$3455) {
                        try {
                            return require('mori');
                        } catch (e$3456) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return eq(hash_map('a', inc(1), str('b'), 4), hash_map('a', 2, 'b', 4));
        }()).to.eql(true);
    });
    it('should allow to create deeply nested data structures', function () {
        _ki = {
            init: function (self$3503, ns_name$3504) {
                if (_ki.namespaces[ns_name$3504] === undefined) {
                    _ki.namespaces[ns_name$3504] = { vars: {} };
                }
                self$3503._ki_ns_name = ns_name$3504;
                self$3503._ki_ns_ctx = self$3503;
                _ki.intern.bind(self$3503)(_ki.modules.core);
                _ki.intern.bind(self$3503)(_ki.modules.mori);
                _ki.intern.bind(self$3503)(_ki.modules);
                _ki.intern.bind(self$3503)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$3505) {
                for (var e$3506 in obj$3505) {
                    this[e$3506] = obj$3505[e$3506];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$3507) {
                        return x$3507 === false || x$3507 == null ? false : true;
                    },
                    falsey: function (x$3508) {
                        return !truthy(x$3508);
                    },
                    not: function (x$3509) {
                        return !truthy(x$3509);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$3510 = 0;
                        for (var i$3511 = 0; i$3511 < arguments.length; i$3511++) {
                            res$3510 += arguments[i$3511];
                        }
                        return res$3510;
                    },
                    sub: function () {
                        var res$3512 = arguments[0];
                        for (var i$3513 = 1; i$3513 < arguments.length; i$3513++) {
                            res$3512 -= arguments[i$3513];
                        }
                        return res$3512;
                    },
                    mul: function () {
                        var res$3514 = 1;
                        for (var i$3515 = 0; i$3515 < arguments.length; i$3515++) {
                            res$3514 *= arguments[i$3515];
                        }
                        return res$3514;
                    },
                    div: function () {
                        var res$3516 = arguments[0];
                        for (var i$3517 = 1; i$3517 < arguments.length; i$3517++) {
                            res$3516 /= arguments[i$3517];
                        }
                        return res$3516;
                    },
                    mod: function (a$3518, b$3519) {
                        return a$3518 % b$3519;
                    },
                    lt: function () {
                        var res$3520 = true;
                        for (var i$3521 = 0; i$3521 < arguments.length - 1; i$3521++) {
                            res$3520 = res$3520 && arguments[i$3521] < arguments[i$3521 + 1];
                            if (!res$3520)
                                break;
                        }
                        return res$3520;
                    },
                    gt: function () {
                        var res$3522 = true;
                        for (var i$3523 = 0; i$3523 < arguments.length - 1; i$3523++) {
                            res$3522 = res$3522 && arguments[i$3523] > arguments[i$3523 + 1];
                            if (!res$3522)
                                break;
                        }
                        return res$3522;
                    },
                    leq: function () {
                        var res$3524 = true;
                        for (var i$3525 = 0; i$3525 < arguments.length - 1; i$3525++) {
                            res$3524 = res$3524 && arguments[i$3525] <= arguments[i$3525 + 1];
                            if (!res$3524)
                                break;
                        }
                        return res$3524;
                    },
                    geq: function () {
                        var res$3526 = true;
                        for (var i$3527 = 0; i$3527 < arguments.length - 1; i$3527++) {
                            res$3526 = res$3526 && arguments[i$3527] >= arguments[i$3527 + 1];
                        }
                        return res$3526;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$3528) {
                        try {
                            return require('mori');
                        } catch (e$3529) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return eq(hash_map('a', vector(2, vector(3, 4)), 'b', hash_map('c', 5, vector(6, 7), 'd')), hash_map('a', vector(2, vector(3, 4)), 'b', hash_map('c', 5, vector(6, 7), 'd')));
        }()).to.eql(true);
    });
    it('should allow to create js arrays', function () {
        _ki = {
            init: function (self$3640, ns_name$3641) {
                if (_ki.namespaces[ns_name$3641] === undefined) {
                    _ki.namespaces[ns_name$3641] = { vars: {} };
                }
                self$3640._ki_ns_name = ns_name$3641;
                self$3640._ki_ns_ctx = self$3640;
                _ki.intern.bind(self$3640)(_ki.modules.core);
                _ki.intern.bind(self$3640)(_ki.modules.mori);
                _ki.intern.bind(self$3640)(_ki.modules);
                _ki.intern.bind(self$3640)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$3642) {
                for (var e$3643 in obj$3642) {
                    this[e$3643] = obj$3642[e$3643];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$3644) {
                        return x$3644 === false || x$3644 == null ? false : true;
                    },
                    falsey: function (x$3645) {
                        return !truthy(x$3645);
                    },
                    not: function (x$3646) {
                        return !truthy(x$3646);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$3647 = 0;
                        for (var i$3648 = 0; i$3648 < arguments.length; i$3648++) {
                            res$3647 += arguments[i$3648];
                        }
                        return res$3647;
                    },
                    sub: function () {
                        var res$3649 = arguments[0];
                        for (var i$3650 = 1; i$3650 < arguments.length; i$3650++) {
                            res$3649 -= arguments[i$3650];
                        }
                        return res$3649;
                    },
                    mul: function () {
                        var res$3651 = 1;
                        for (var i$3652 = 0; i$3652 < arguments.length; i$3652++) {
                            res$3651 *= arguments[i$3652];
                        }
                        return res$3651;
                    },
                    div: function () {
                        var res$3653 = arguments[0];
                        for (var i$3654 = 1; i$3654 < arguments.length; i$3654++) {
                            res$3653 /= arguments[i$3654];
                        }
                        return res$3653;
                    },
                    mod: function (a$3655, b$3656) {
                        return a$3655 % b$3656;
                    },
                    lt: function () {
                        var res$3657 = true;
                        for (var i$3658 = 0; i$3658 < arguments.length - 1; i$3658++) {
                            res$3657 = res$3657 && arguments[i$3658] < arguments[i$3658 + 1];
                            if (!res$3657)
                                break;
                        }
                        return res$3657;
                    },
                    gt: function () {
                        var res$3659 = true;
                        for (var i$3660 = 0; i$3660 < arguments.length - 1; i$3660++) {
                            res$3659 = res$3659 && arguments[i$3660] > arguments[i$3660 + 1];
                            if (!res$3659)
                                break;
                        }
                        return res$3659;
                    },
                    leq: function () {
                        var res$3661 = true;
                        for (var i$3662 = 0; i$3662 < arguments.length - 1; i$3662++) {
                            res$3661 = res$3661 && arguments[i$3662] <= arguments[i$3662 + 1];
                            if (!res$3661)
                                break;
                        }
                        return res$3661;
                    },
                    geq: function () {
                        var res$3663 = true;
                        for (var i$3664 = 0; i$3664 < arguments.length - 1; i$3664++) {
                            res$3663 = res$3663 && arguments[i$3664] >= arguments[i$3664 + 1];
                        }
                        return res$3663;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$3665) {
                        try {
                            return require('mori');
                        } catch (e$3666) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return function () {
                return [
                    1,
                    2,
                    3,
                    4
                ];
            }.call(this);
        }()).to.eql([
            1,
            2,
            3,
            4
        ]);
    });
    it('should allow to create js objects', function () {
        _ki = {
            init: function (self$3684, ns_name$3685) {
                if (_ki.namespaces[ns_name$3685] === undefined) {
                    _ki.namespaces[ns_name$3685] = { vars: {} };
                }
                self$3684._ki_ns_name = ns_name$3685;
                self$3684._ki_ns_ctx = self$3684;
                _ki.intern.bind(self$3684)(_ki.modules.core);
                _ki.intern.bind(self$3684)(_ki.modules.mori);
                _ki.intern.bind(self$3684)(_ki.modules);
                _ki.intern.bind(self$3684)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$3686) {
                for (var e$3687 in obj$3686) {
                    this[e$3687] = obj$3686[e$3687];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$3688) {
                        return x$3688 === false || x$3688 == null ? false : true;
                    },
                    falsey: function (x$3689) {
                        return !truthy(x$3689);
                    },
                    not: function (x$3690) {
                        return !truthy(x$3690);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$3691 = 0;
                        for (var i$3692 = 0; i$3692 < arguments.length; i$3692++) {
                            res$3691 += arguments[i$3692];
                        }
                        return res$3691;
                    },
                    sub: function () {
                        var res$3693 = arguments[0];
                        for (var i$3694 = 1; i$3694 < arguments.length; i$3694++) {
                            res$3693 -= arguments[i$3694];
                        }
                        return res$3693;
                    },
                    mul: function () {
                        var res$3695 = 1;
                        for (var i$3696 = 0; i$3696 < arguments.length; i$3696++) {
                            res$3695 *= arguments[i$3696];
                        }
                        return res$3695;
                    },
                    div: function () {
                        var res$3697 = arguments[0];
                        for (var i$3698 = 1; i$3698 < arguments.length; i$3698++) {
                            res$3697 /= arguments[i$3698];
                        }
                        return res$3697;
                    },
                    mod: function (a$3699, b$3700) {
                        return a$3699 % b$3700;
                    },
                    lt: function () {
                        var res$3701 = true;
                        for (var i$3702 = 0; i$3702 < arguments.length - 1; i$3702++) {
                            res$3701 = res$3701 && arguments[i$3702] < arguments[i$3702 + 1];
                            if (!res$3701)
                                break;
                        }
                        return res$3701;
                    },
                    gt: function () {
                        var res$3703 = true;
                        for (var i$3704 = 0; i$3704 < arguments.length - 1; i$3704++) {
                            res$3703 = res$3703 && arguments[i$3704] > arguments[i$3704 + 1];
                            if (!res$3703)
                                break;
                        }
                        return res$3703;
                    },
                    leq: function () {
                        var res$3705 = true;
                        for (var i$3706 = 0; i$3706 < arguments.length - 1; i$3706++) {
                            res$3705 = res$3705 && arguments[i$3706] <= arguments[i$3706 + 1];
                            if (!res$3705)
                                break;
                        }
                        return res$3705;
                    },
                    geq: function () {
                        var res$3707 = true;
                        for (var i$3708 = 0; i$3708 < arguments.length - 1; i$3708++) {
                            res$3707 = res$3707 && arguments[i$3708] >= arguments[i$3708 + 1];
                        }
                        return res$3707;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$3709) {
                        try {
                            return require('mori');
                        } catch (e$3710) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return function () {
                return {
                    'a': 1,
                    'b': 2
                };
            }.call(this);
        }()).to.eql({
            a: 1,
            b: 2
        });
    });
    it('should allow to create nested js objects', function () {
        _ki = {
            init: function (self$3726, ns_name$3727) {
                if (_ki.namespaces[ns_name$3727] === undefined) {
                    _ki.namespaces[ns_name$3727] = { vars: {} };
                }
                self$3726._ki_ns_name = ns_name$3727;
                self$3726._ki_ns_ctx = self$3726;
                _ki.intern.bind(self$3726)(_ki.modules.core);
                _ki.intern.bind(self$3726)(_ki.modules.mori);
                _ki.intern.bind(self$3726)(_ki.modules);
                _ki.intern.bind(self$3726)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$3728) {
                for (var e$3729 in obj$3728) {
                    this[e$3729] = obj$3728[e$3729];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$3730) {
                        return x$3730 === false || x$3730 == null ? false : true;
                    },
                    falsey: function (x$3731) {
                        return !truthy(x$3731);
                    },
                    not: function (x$3732) {
                        return !truthy(x$3732);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$3733 = 0;
                        for (var i$3734 = 0; i$3734 < arguments.length; i$3734++) {
                            res$3733 += arguments[i$3734];
                        }
                        return res$3733;
                    },
                    sub: function () {
                        var res$3735 = arguments[0];
                        for (var i$3736 = 1; i$3736 < arguments.length; i$3736++) {
                            res$3735 -= arguments[i$3736];
                        }
                        return res$3735;
                    },
                    mul: function () {
                        var res$3737 = 1;
                        for (var i$3738 = 0; i$3738 < arguments.length; i$3738++) {
                            res$3737 *= arguments[i$3738];
                        }
                        return res$3737;
                    },
                    div: function () {
                        var res$3739 = arguments[0];
                        for (var i$3740 = 1; i$3740 < arguments.length; i$3740++) {
                            res$3739 /= arguments[i$3740];
                        }
                        return res$3739;
                    },
                    mod: function (a$3741, b$3742) {
                        return a$3741 % b$3742;
                    },
                    lt: function () {
                        var res$3743 = true;
                        for (var i$3744 = 0; i$3744 < arguments.length - 1; i$3744++) {
                            res$3743 = res$3743 && arguments[i$3744] < arguments[i$3744 + 1];
                            if (!res$3743)
                                break;
                        }
                        return res$3743;
                    },
                    gt: function () {
                        var res$3745 = true;
                        for (var i$3746 = 0; i$3746 < arguments.length - 1; i$3746++) {
                            res$3745 = res$3745 && arguments[i$3746] > arguments[i$3746 + 1];
                            if (!res$3745)
                                break;
                        }
                        return res$3745;
                    },
                    leq: function () {
                        var res$3747 = true;
                        for (var i$3748 = 0; i$3748 < arguments.length - 1; i$3748++) {
                            res$3747 = res$3747 && arguments[i$3748] <= arguments[i$3748 + 1];
                            if (!res$3747)
                                break;
                        }
                        return res$3747;
                    },
                    geq: function () {
                        var res$3749 = true;
                        for (var i$3750 = 0; i$3750 < arguments.length - 1; i$3750++) {
                            res$3749 = res$3749 && arguments[i$3750] >= arguments[i$3750 + 1];
                        }
                        return res$3749;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$3751) {
                        try {
                            return require('mori');
                        } catch (e$3752) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return function () {
                return {
                    'a': {
                        'c': [
                            3,
                            4
                        ]
                    },
                    'b': 2
                };
            }.call(this);
        }()).to.eql({
            a: {
                c: [
                    3,
                    4
                ]
            },
            b: 2
        });
    });
});
describe('recursion', function () {
    it('should allow to express simple recursion', function () {
        _ki = {
            init: function (self$3778, ns_name$3779) {
                if (_ki.namespaces[ns_name$3779] === undefined) {
                    _ki.namespaces[ns_name$3779] = { vars: {} };
                }
                self$3778._ki_ns_name = ns_name$3779;
                self$3778._ki_ns_ctx = self$3778;
                _ki.intern.bind(self$3778)(_ki.modules.core);
                _ki.intern.bind(self$3778)(_ki.modules.mori);
                _ki.intern.bind(self$3778)(_ki.modules);
                _ki.intern.bind(self$3778)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$3780) {
                for (var e$3781 in obj$3780) {
                    this[e$3781] = obj$3780[e$3781];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$3782) {
                        return x$3782 === false || x$3782 == null ? false : true;
                    },
                    falsey: function (x$3783) {
                        return !truthy(x$3783);
                    },
                    not: function (x$3784) {
                        return !truthy(x$3784);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$3785 = 0;
                        for (var i$3786 = 0; i$3786 < arguments.length; i$3786++) {
                            res$3785 += arguments[i$3786];
                        }
                        return res$3785;
                    },
                    sub: function () {
                        var res$3787 = arguments[0];
                        for (var i$3788 = 1; i$3788 < arguments.length; i$3788++) {
                            res$3787 -= arguments[i$3788];
                        }
                        return res$3787;
                    },
                    mul: function () {
                        var res$3789 = 1;
                        for (var i$3790 = 0; i$3790 < arguments.length; i$3790++) {
                            res$3789 *= arguments[i$3790];
                        }
                        return res$3789;
                    },
                    div: function () {
                        var res$3791 = arguments[0];
                        for (var i$3792 = 1; i$3792 < arguments.length; i$3792++) {
                            res$3791 /= arguments[i$3792];
                        }
                        return res$3791;
                    },
                    mod: function (a$3793, b$3794) {
                        return a$3793 % b$3794;
                    },
                    lt: function () {
                        var res$3795 = true;
                        for (var i$3796 = 0; i$3796 < arguments.length - 1; i$3796++) {
                            res$3795 = res$3795 && arguments[i$3796] < arguments[i$3796 + 1];
                            if (!res$3795)
                                break;
                        }
                        return res$3795;
                    },
                    gt: function () {
                        var res$3797 = true;
                        for (var i$3798 = 0; i$3798 < arguments.length - 1; i$3798++) {
                            res$3797 = res$3797 && arguments[i$3798] > arguments[i$3798 + 1];
                            if (!res$3797)
                                break;
                        }
                        return res$3797;
                    },
                    leq: function () {
                        var res$3799 = true;
                        for (var i$3800 = 0; i$3800 < arguments.length - 1; i$3800++) {
                            res$3799 = res$3799 && arguments[i$3800] <= arguments[i$3800 + 1];
                            if (!res$3799)
                                break;
                        }
                        return res$3799;
                    },
                    geq: function () {
                        var res$3801 = true;
                        for (var i$3802 = 0; i$3802 < arguments.length - 1; i$3802++) {
                            res$3801 = res$3801 && arguments[i$3802] >= arguments[i$3802 + 1];
                        }
                        return res$3801;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$3803) {
                        try {
                            return require('mori');
                        } catch (e$3804) {
                            return mori;
                        }
                    }
                }()
            }
        };
        (function () {
            _ki.init(this, '_ki');
            return function () {
                _ki_ns_ctx['fib'] = function (n$3809) {
                    return function () {
                        if (truthy(eq(n$3809, 0))) {
                            return 0;
                        }
                        return function () {
                            if (truthy(eq(n$3809, 1))) {
                                return 1;
                            }
                            return function () {
                                if (truthy('else')) {
                                    return sum(fib(n$3809 - 1), fib(n$3809 - 2));
                                }
                                return undefined;
                            }.call(this);
                        }.call(this);
                    }.call(this);
                };
                _ki.namespaces[_ki_ns_name].vars.fib = _ki_ns_ctx['fib'];
                return _ki_ns_ctx['fib'];
            }();
        }());
        expect$1466(function () {
            _ki.init(this, '_ki');
            return fib(20);
        }()).to.eql(6765);
    });
    it('should allow to recur using loop/recur without blowing the stack', function () {
        _ki = {
            init: function (self$3876, ns_name$3877) {
                if (_ki.namespaces[ns_name$3877] === undefined) {
                    _ki.namespaces[ns_name$3877] = { vars: {} };
                }
                self$3876._ki_ns_name = ns_name$3877;
                self$3876._ki_ns_ctx = self$3876;
                _ki.intern.bind(self$3876)(_ki.modules.core);
                _ki.intern.bind(self$3876)(_ki.modules.mori);
                _ki.intern.bind(self$3876)(_ki.modules);
                _ki.intern.bind(self$3876)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$3878) {
                for (var e$3879 in obj$3878) {
                    this[e$3879] = obj$3878[e$3879];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$3880) {
                        return x$3880 === false || x$3880 == null ? false : true;
                    },
                    falsey: function (x$3881) {
                        return !truthy(x$3881);
                    },
                    not: function (x$3882) {
                        return !truthy(x$3882);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$3883 = 0;
                        for (var i$3884 = 0; i$3884 < arguments.length; i$3884++) {
                            res$3883 += arguments[i$3884];
                        }
                        return res$3883;
                    },
                    sub: function () {
                        var res$3885 = arguments[0];
                        for (var i$3886 = 1; i$3886 < arguments.length; i$3886++) {
                            res$3885 -= arguments[i$3886];
                        }
                        return res$3885;
                    },
                    mul: function () {
                        var res$3887 = 1;
                        for (var i$3888 = 0; i$3888 < arguments.length; i$3888++) {
                            res$3887 *= arguments[i$3888];
                        }
                        return res$3887;
                    },
                    div: function () {
                        var res$3889 = arguments[0];
                        for (var i$3890 = 1; i$3890 < arguments.length; i$3890++) {
                            res$3889 /= arguments[i$3890];
                        }
                        return res$3889;
                    },
                    mod: function (a$3891, b$3892) {
                        return a$3891 % b$3892;
                    },
                    lt: function () {
                        var res$3893 = true;
                        for (var i$3894 = 0; i$3894 < arguments.length - 1; i$3894++) {
                            res$3893 = res$3893 && arguments[i$3894] < arguments[i$3894 + 1];
                            if (!res$3893)
                                break;
                        }
                        return res$3893;
                    },
                    gt: function () {
                        var res$3895 = true;
                        for (var i$3896 = 0; i$3896 < arguments.length - 1; i$3896++) {
                            res$3895 = res$3895 && arguments[i$3896] > arguments[i$3896 + 1];
                            if (!res$3895)
                                break;
                        }
                        return res$3895;
                    },
                    leq: function () {
                        var res$3897 = true;
                        for (var i$3898 = 0; i$3898 < arguments.length - 1; i$3898++) {
                            res$3897 = res$3897 && arguments[i$3898] <= arguments[i$3898 + 1];
                            if (!res$3897)
                                break;
                        }
                        return res$3897;
                    },
                    geq: function () {
                        var res$3899 = true;
                        for (var i$3900 = 0; i$3900 < arguments.length - 1; i$3900++) {
                            res$3899 = res$3899 && arguments[i$3900] >= arguments[i$3900 + 1];
                        }
                        return res$3899;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$3901) {
                        try {
                            return require('mori');
                        } catch (e$3902) {
                            return mori;
                        }
                    }
                }()
            }
        };
        (function () {
            _ki.init(this, '_ki');
            return function () {
                _ki_ns_ctx['fib'] = function (n$3907) {
                    return function () {
                        var res$3910 = {};
                        do {
                            res$3910 = function () {
                                return function (a$3914) {
                                    return function (b$3922) {
                                        return function (iter$3926) {
                                            return function () {
                                                if (truthy(iter$3926 == n$3907)) {
                                                    return a$3914;
                                                }
                                                return {
                                                    _ki_recur: true,
                                                    _ki_vals: [
                                                        b$3922,
                                                        a$3914 + b$3922,
                                                        inc(iter$3926)
                                                    ]
                                                };
                                            }.call(this);
                                        }(res$3910._ki_vals === undefined ? 0 : res$3910._ki_vals[0 + 1 + 1]);
                                    }(res$3910._ki_vals === undefined ? inc(a$3914) : res$3910._ki_vals[0 + 1]);
                                }(res$3910._ki_vals === undefined ? 0 : res$3910._ki_vals[0]);
                                ;
                            }();
                        } while ((res$3910 || 0)._ki_recur);
                        return res$3910;
                    }.call(this);
                };
                _ki.namespaces[_ki_ns_name].vars.fib = _ki_ns_ctx['fib'];
                return _ki_ns_ctx['fib'];
            }();
        }());
        expect$1466(function () {
            _ki.init(this, '_ki');
            return fib(20);
        }()).to.eql(6765);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return fib(500);
        }()).to.eql(1.394232245616977e+104);
    });
});
describe('keywords', function () {
    it('should be usable in collections', function () {
        _ki = {
            init: function (self$3965, ns_name$3966) {
                if (_ki.namespaces[ns_name$3966] === undefined) {
                    _ki.namespaces[ns_name$3966] = { vars: {} };
                }
                self$3965._ki_ns_name = ns_name$3966;
                self$3965._ki_ns_ctx = self$3965;
                _ki.intern.bind(self$3965)(_ki.modules.core);
                _ki.intern.bind(self$3965)(_ki.modules.mori);
                _ki.intern.bind(self$3965)(_ki.modules);
                _ki.intern.bind(self$3965)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$3967) {
                for (var e$3968 in obj$3967) {
                    this[e$3968] = obj$3967[e$3968];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$3969) {
                        return x$3969 === false || x$3969 == null ? false : true;
                    },
                    falsey: function (x$3970) {
                        return !truthy(x$3970);
                    },
                    not: function (x$3971) {
                        return !truthy(x$3971);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$3972 = 0;
                        for (var i$3973 = 0; i$3973 < arguments.length; i$3973++) {
                            res$3972 += arguments[i$3973];
                        }
                        return res$3972;
                    },
                    sub: function () {
                        var res$3974 = arguments[0];
                        for (var i$3975 = 1; i$3975 < arguments.length; i$3975++) {
                            res$3974 -= arguments[i$3975];
                        }
                        return res$3974;
                    },
                    mul: function () {
                        var res$3976 = 1;
                        for (var i$3977 = 0; i$3977 < arguments.length; i$3977++) {
                            res$3976 *= arguments[i$3977];
                        }
                        return res$3976;
                    },
                    div: function () {
                        var res$3978 = arguments[0];
                        for (var i$3979 = 1; i$3979 < arguments.length; i$3979++) {
                            res$3978 /= arguments[i$3979];
                        }
                        return res$3978;
                    },
                    mod: function (a$3980, b$3981) {
                        return a$3980 % b$3981;
                    },
                    lt: function () {
                        var res$3982 = true;
                        for (var i$3983 = 0; i$3983 < arguments.length - 1; i$3983++) {
                            res$3982 = res$3982 && arguments[i$3983] < arguments[i$3983 + 1];
                            if (!res$3982)
                                break;
                        }
                        return res$3982;
                    },
                    gt: function () {
                        var res$3984 = true;
                        for (var i$3985 = 0; i$3985 < arguments.length - 1; i$3985++) {
                            res$3984 = res$3984 && arguments[i$3985] > arguments[i$3985 + 1];
                            if (!res$3984)
                                break;
                        }
                        return res$3984;
                    },
                    leq: function () {
                        var res$3986 = true;
                        for (var i$3987 = 0; i$3987 < arguments.length - 1; i$3987++) {
                            res$3986 = res$3986 && arguments[i$3987] <= arguments[i$3987 + 1];
                            if (!res$3986)
                                break;
                        }
                        return res$3986;
                    },
                    geq: function () {
                        var res$3988 = true;
                        for (var i$3989 = 0; i$3989 < arguments.length - 1; i$3989++) {
                            res$3988 = res$3988 && arguments[i$3989] >= arguments[i$3989 + 1];
                        }
                        return res$3988;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$3990) {
                        try {
                            return require('mori');
                        } catch (e$3991) {
                            return mori;
                        }
                    }
                }()
            }
        };
        var mori$3963 = _ki.modules.mori;
        expect$1466(function () {
            _ki.init(this, '_ki');
            return function () {
                return vector(keyword('a'), 1, keyword('b'), hash_map(keyword('c'), 2));
            }.call(this);
        }()).to.eql(mori$3963.vector(mori$3963.keyword('a'), 1, mori$3963.keyword('b'), mori$3963.hash_map(mori$3963.keyword('c'), 2)));
    });
}    //it("should evaluate to themselves", function() {
     //  ki require core
     //  var mori = _ki.modules.mori;
     //  expect(ki (do (:a))).to.eql(mori.keyword('a'));
     //});
     //it("should evaluate as keys to get values from collections", function() {
     //  ki require core
     //  var mori = _ki.modules.mori;
     //  expect(ki (:a {:a 1 :b 2})).to.eql(1);
     //});
);
describe('arity', function () {
    it('should allow calling functions without arity constraints, as in js', function () {
        _ki = {
            init: function (self$4034, ns_name$4035) {
                if (_ki.namespaces[ns_name$4035] === undefined) {
                    _ki.namespaces[ns_name$4035] = { vars: {} };
                }
                self$4034._ki_ns_name = ns_name$4035;
                self$4034._ki_ns_ctx = self$4034;
                _ki.intern.bind(self$4034)(_ki.modules.core);
                _ki.intern.bind(self$4034)(_ki.modules.mori);
                _ki.intern.bind(self$4034)(_ki.modules);
                _ki.intern.bind(self$4034)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$4036) {
                for (var e$4037 in obj$4036) {
                    this[e$4037] = obj$4036[e$4037];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$4038) {
                        return x$4038 === false || x$4038 == null ? false : true;
                    },
                    falsey: function (x$4039) {
                        return !truthy(x$4039);
                    },
                    not: function (x$4040) {
                        return !truthy(x$4040);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$4041 = 0;
                        for (var i$4042 = 0; i$4042 < arguments.length; i$4042++) {
                            res$4041 += arguments[i$4042];
                        }
                        return res$4041;
                    },
                    sub: function () {
                        var res$4043 = arguments[0];
                        for (var i$4044 = 1; i$4044 < arguments.length; i$4044++) {
                            res$4043 -= arguments[i$4044];
                        }
                        return res$4043;
                    },
                    mul: function () {
                        var res$4045 = 1;
                        for (var i$4046 = 0; i$4046 < arguments.length; i$4046++) {
                            res$4045 *= arguments[i$4046];
                        }
                        return res$4045;
                    },
                    div: function () {
                        var res$4047 = arguments[0];
                        for (var i$4048 = 1; i$4048 < arguments.length; i$4048++) {
                            res$4047 /= arguments[i$4048];
                        }
                        return res$4047;
                    },
                    mod: function (a$4049, b$4050) {
                        return a$4049 % b$4050;
                    },
                    lt: function () {
                        var res$4051 = true;
                        for (var i$4052 = 0; i$4052 < arguments.length - 1; i$4052++) {
                            res$4051 = res$4051 && arguments[i$4052] < arguments[i$4052 + 1];
                            if (!res$4051)
                                break;
                        }
                        return res$4051;
                    },
                    gt: function () {
                        var res$4053 = true;
                        for (var i$4054 = 0; i$4054 < arguments.length - 1; i$4054++) {
                            res$4053 = res$4053 && arguments[i$4054] > arguments[i$4054 + 1];
                            if (!res$4053)
                                break;
                        }
                        return res$4053;
                    },
                    leq: function () {
                        var res$4055 = true;
                        for (var i$4056 = 0; i$4056 < arguments.length - 1; i$4056++) {
                            res$4055 = res$4055 && arguments[i$4056] <= arguments[i$4056 + 1];
                            if (!res$4055)
                                break;
                        }
                        return res$4055;
                    },
                    geq: function () {
                        var res$4057 = true;
                        for (var i$4058 = 0; i$4058 < arguments.length - 1; i$4058++) {
                            res$4057 = res$4057 && arguments[i$4058] >= arguments[i$4058 + 1];
                        }
                        return res$4057;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$4059) {
                        try {
                            return require('mori');
                        } catch (e$4060) {
                            return mori;
                        }
                    }
                }()
            }
        };
        (function () {
            _ki.init(this, '_ki');
            return function () {
                _ki_ns_ctx['foo'] = function (a$4065) {
                    return str('Hello ', a$4065);
                };
                _ki.namespaces[_ki_ns_name].vars.foo = _ki_ns_ctx['foo'];
                return _ki_ns_ctx['foo'];
            }();
        }());
        expect$1466(function () {
            _ki.init(this, '_ki');
            return foo(1, 2);
        }()).to.eql('Hello 1');
        expect$1466(function () {
            _ki.init(this, '_ki');
            return foo();
        }()).to.eql('Hello undefined');
    });
    it('should allow to define functions with multiple arities', function () {
        _ki = {
            init: function (self$4099, ns_name$4100) {
                if (_ki.namespaces[ns_name$4100] === undefined) {
                    _ki.namespaces[ns_name$4100] = { vars: {} };
                }
                self$4099._ki_ns_name = ns_name$4100;
                self$4099._ki_ns_ctx = self$4099;
                _ki.intern.bind(self$4099)(_ki.modules.core);
                _ki.intern.bind(self$4099)(_ki.modules.mori);
                _ki.intern.bind(self$4099)(_ki.modules);
                _ki.intern.bind(self$4099)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$4101) {
                for (var e$4102 in obj$4101) {
                    this[e$4102] = obj$4101[e$4102];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$4103) {
                        return x$4103 === false || x$4103 == null ? false : true;
                    },
                    falsey: function (x$4104) {
                        return !truthy(x$4104);
                    },
                    not: function (x$4105) {
                        return !truthy(x$4105);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$4106 = 0;
                        for (var i$4107 = 0; i$4107 < arguments.length; i$4107++) {
                            res$4106 += arguments[i$4107];
                        }
                        return res$4106;
                    },
                    sub: function () {
                        var res$4108 = arguments[0];
                        for (var i$4109 = 1; i$4109 < arguments.length; i$4109++) {
                            res$4108 -= arguments[i$4109];
                        }
                        return res$4108;
                    },
                    mul: function () {
                        var res$4110 = 1;
                        for (var i$4111 = 0; i$4111 < arguments.length; i$4111++) {
                            res$4110 *= arguments[i$4111];
                        }
                        return res$4110;
                    },
                    div: function () {
                        var res$4112 = arguments[0];
                        for (var i$4113 = 1; i$4113 < arguments.length; i$4113++) {
                            res$4112 /= arguments[i$4113];
                        }
                        return res$4112;
                    },
                    mod: function (a$4114, b$4115) {
                        return a$4114 % b$4115;
                    },
                    lt: function () {
                        var res$4116 = true;
                        for (var i$4117 = 0; i$4117 < arguments.length - 1; i$4117++) {
                            res$4116 = res$4116 && arguments[i$4117] < arguments[i$4117 + 1];
                            if (!res$4116)
                                break;
                        }
                        return res$4116;
                    },
                    gt: function () {
                        var res$4118 = true;
                        for (var i$4119 = 0; i$4119 < arguments.length - 1; i$4119++) {
                            res$4118 = res$4118 && arguments[i$4119] > arguments[i$4119 + 1];
                            if (!res$4118)
                                break;
                        }
                        return res$4118;
                    },
                    leq: function () {
                        var res$4120 = true;
                        for (var i$4121 = 0; i$4121 < arguments.length - 1; i$4121++) {
                            res$4120 = res$4120 && arguments[i$4121] <= arguments[i$4121 + 1];
                            if (!res$4120)
                                break;
                        }
                        return res$4120;
                    },
                    geq: function () {
                        var res$4122 = true;
                        for (var i$4123 = 0; i$4123 < arguments.length - 1; i$4123++) {
                            res$4122 = res$4122 && arguments[i$4123] >= arguments[i$4123 + 1];
                        }
                        return res$4122;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$4124) {
                        try {
                            return require('mori');
                        } catch (e$4125) {
                            return mori;
                        }
                    }
                }()
            }
        };
        (function () {
            _ki.init(this, '_ki');
            return function () {
                _ki_ns_ctx['foo'] = function () {
                    var fnmap$4130 = {
                            1: function (a$4139) {
                                return str('Hello ', a$4139);
                            },
                            2: function (a$4150, b$4151) {
                                return str('There ', a$4150, ' ', b$4151);
                            }
                        };
                    var max_arity$4131 = 0;
                    for (var a$4132 in fnmap$4130) {
                        max_arity$4131 = a$4132 > max_arity$4131 ? a$4132 : max_arity$4131;
                    }
                    fnmap$4130[null] = fnmap$4130[max_arity$4131];
                    return function () {
                        var f$4168 = fnmap$4130[arguments.length] || fnmap$4130[null];
                        return f$4168.apply(this, arguments);
                    };
                }.call(this);
                _ki.namespaces[_ki_ns_name].vars.foo = _ki_ns_ctx['foo'];
                return _ki_ns_ctx['foo'];
            }();
        }());
        expect$1466(function () {
            _ki.init(this, '_ki');
            return foo(1);
        }()).to.eql('Hello 1');
        expect$1466(function () {
            _ki.init(this, '_ki');
            return foo(1, 2);
        }()).to.eql('There 1 2');
    });
    it('should allow to define named anonymous functions with multiple arities and refer to the name within the body', function () {
        _ki = {
            init: function (self$4187, ns_name$4188) {
                if (_ki.namespaces[ns_name$4188] === undefined) {
                    _ki.namespaces[ns_name$4188] = { vars: {} };
                }
                self$4187._ki_ns_name = ns_name$4188;
                self$4187._ki_ns_ctx = self$4187;
                _ki.intern.bind(self$4187)(_ki.modules.core);
                _ki.intern.bind(self$4187)(_ki.modules.mori);
                _ki.intern.bind(self$4187)(_ki.modules);
                _ki.intern.bind(self$4187)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$4189) {
                for (var e$4190 in obj$4189) {
                    this[e$4190] = obj$4189[e$4190];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$4191) {
                        return x$4191 === false || x$4191 == null ? false : true;
                    },
                    falsey: function (x$4192) {
                        return !truthy(x$4192);
                    },
                    not: function (x$4193) {
                        return !truthy(x$4193);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$4194 = 0;
                        for (var i$4195 = 0; i$4195 < arguments.length; i$4195++) {
                            res$4194 += arguments[i$4195];
                        }
                        return res$4194;
                    },
                    sub: function () {
                        var res$4196 = arguments[0];
                        for (var i$4197 = 1; i$4197 < arguments.length; i$4197++) {
                            res$4196 -= arguments[i$4197];
                        }
                        return res$4196;
                    },
                    mul: function () {
                        var res$4198 = 1;
                        for (var i$4199 = 0; i$4199 < arguments.length; i$4199++) {
                            res$4198 *= arguments[i$4199];
                        }
                        return res$4198;
                    },
                    div: function () {
                        var res$4200 = arguments[0];
                        for (var i$4201 = 1; i$4201 < arguments.length; i$4201++) {
                            res$4200 /= arguments[i$4201];
                        }
                        return res$4200;
                    },
                    mod: function (a$4202, b$4203) {
                        return a$4202 % b$4203;
                    },
                    lt: function () {
                        var res$4204 = true;
                        for (var i$4205 = 0; i$4205 < arguments.length - 1; i$4205++) {
                            res$4204 = res$4204 && arguments[i$4205] < arguments[i$4205 + 1];
                            if (!res$4204)
                                break;
                        }
                        return res$4204;
                    },
                    gt: function () {
                        var res$4206 = true;
                        for (var i$4207 = 0; i$4207 < arguments.length - 1; i$4207++) {
                            res$4206 = res$4206 && arguments[i$4207] > arguments[i$4207 + 1];
                            if (!res$4206)
                                break;
                        }
                        return res$4206;
                    },
                    leq: function () {
                        var res$4208 = true;
                        for (var i$4209 = 0; i$4209 < arguments.length - 1; i$4209++) {
                            res$4208 = res$4208 && arguments[i$4209] <= arguments[i$4209 + 1];
                            if (!res$4208)
                                break;
                        }
                        return res$4208;
                    },
                    geq: function () {
                        var res$4210 = true;
                        for (var i$4211 = 0; i$4211 < arguments.length - 1; i$4211++) {
                            res$4210 = res$4210 && arguments[i$4211] >= arguments[i$4211 + 1];
                        }
                        return res$4210;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$4212) {
                        try {
                            return require('mori');
                        } catch (e$4213) {
                            return mori;
                        }
                    }
                }()
            }
        };
        var f$4186 = function () {
                _ki.init(this, '_ki');
                return function self() {
                    var fnmap$4215 = {
                            0: function () {
                                return self('world');
                            },
                            1: function (who$4232) {
                                return str('Hello ', who$4232, '!');
                            }
                        };
                    var max_arity$4216 = 0;
                    for (var a$4217 in fnmap$4215) {
                        max_arity$4216 = a$4217 > max_arity$4216 ? a$4217 : max_arity$4216;
                    }
                    fnmap$4215[null] = fnmap$4215[max_arity$4216];
                    var f$4218 = fnmap$4215[arguments.length] || fnmap$4215[null];
                    return f$4218.apply(this, arguments);
                };
            }();
        expect$1466(f$4186()).to.eql('Hello world!');
        expect$1466(f$4186('yellow')).to.eql('Hello yellow!');
    });
    it('should fallback to max arity in case supplied arguments do not match the specified arities', function () {
        _ki = {
            init: function (self$4250, ns_name$4251) {
                if (_ki.namespaces[ns_name$4251] === undefined) {
                    _ki.namespaces[ns_name$4251] = { vars: {} };
                }
                self$4250._ki_ns_name = ns_name$4251;
                self$4250._ki_ns_ctx = self$4250;
                _ki.intern.bind(self$4250)(_ki.modules.core);
                _ki.intern.bind(self$4250)(_ki.modules.mori);
                _ki.intern.bind(self$4250)(_ki.modules);
                _ki.intern.bind(self$4250)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$4252) {
                for (var e$4253 in obj$4252) {
                    this[e$4253] = obj$4252[e$4253];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$4254) {
                        return x$4254 === false || x$4254 == null ? false : true;
                    },
                    falsey: function (x$4255) {
                        return !truthy(x$4255);
                    },
                    not: function (x$4256) {
                        return !truthy(x$4256);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$4257 = 0;
                        for (var i$4258 = 0; i$4258 < arguments.length; i$4258++) {
                            res$4257 += arguments[i$4258];
                        }
                        return res$4257;
                    },
                    sub: function () {
                        var res$4259 = arguments[0];
                        for (var i$4260 = 1; i$4260 < arguments.length; i$4260++) {
                            res$4259 -= arguments[i$4260];
                        }
                        return res$4259;
                    },
                    mul: function () {
                        var res$4261 = 1;
                        for (var i$4262 = 0; i$4262 < arguments.length; i$4262++) {
                            res$4261 *= arguments[i$4262];
                        }
                        return res$4261;
                    },
                    div: function () {
                        var res$4263 = arguments[0];
                        for (var i$4264 = 1; i$4264 < arguments.length; i$4264++) {
                            res$4263 /= arguments[i$4264];
                        }
                        return res$4263;
                    },
                    mod: function (a$4265, b$4266) {
                        return a$4265 % b$4266;
                    },
                    lt: function () {
                        var res$4267 = true;
                        for (var i$4268 = 0; i$4268 < arguments.length - 1; i$4268++) {
                            res$4267 = res$4267 && arguments[i$4268] < arguments[i$4268 + 1];
                            if (!res$4267)
                                break;
                        }
                        return res$4267;
                    },
                    gt: function () {
                        var res$4269 = true;
                        for (var i$4270 = 0; i$4270 < arguments.length - 1; i$4270++) {
                            res$4269 = res$4269 && arguments[i$4270] > arguments[i$4270 + 1];
                            if (!res$4269)
                                break;
                        }
                        return res$4269;
                    },
                    leq: function () {
                        var res$4271 = true;
                        for (var i$4272 = 0; i$4272 < arguments.length - 1; i$4272++) {
                            res$4271 = res$4271 && arguments[i$4272] <= arguments[i$4272 + 1];
                            if (!res$4271)
                                break;
                        }
                        return res$4271;
                    },
                    geq: function () {
                        var res$4273 = true;
                        for (var i$4274 = 0; i$4274 < arguments.length - 1; i$4274++) {
                            res$4273 = res$4273 && arguments[i$4274] >= arguments[i$4274 + 1];
                        }
                        return res$4273;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$4275) {
                        try {
                            return require('mori');
                        } catch (e$4276) {
                            return mori;
                        }
                    }
                }()
            }
        };
        (function () {
            _ki.init(this, '_ki');
            return function () {
                _ki_ns_ctx['foo'] = function () {
                    var fnmap$4281 = {
                            1: function (a$4290) {
                                return str('Hello ', a$4290);
                            },
                            2: function (a$4301, b$4302) {
                                return str('There ', a$4301, ' ', b$4302);
                            }
                        };
                    var max_arity$4282 = 0;
                    for (var a$4283 in fnmap$4281) {
                        max_arity$4282 = a$4283 > max_arity$4282 ? a$4283 : max_arity$4282;
                    }
                    fnmap$4281[null] = fnmap$4281[max_arity$4282];
                    return function () {
                        var f$4319 = fnmap$4281[arguments.length] || fnmap$4281[null];
                        return f$4319.apply(this, arguments);
                    };
                }.call(this);
                _ki.namespaces[_ki_ns_name].vars.foo = _ki_ns_ctx['foo'];
                return _ki_ns_ctx['foo'];
            }();
        }());
        expect$1466(function () {
            _ki.init(this, '_ki');
            return foo();
        }()).to.eql('There undefined undefined');
        expect$1466(function () {
            _ki.init(this, '_ki');
            return foo(1, 2, 3);
        }()).to.eql('There 1 2');
    });
}    //it("should allow to define functions with optional arguments", function() {
     //  throw "Not implemented"
     //});
);
describe('dot notation', function () {
    it('should allow to use dot notation to invoke methods on JavaScript objects', function () {
        _ki = {
            init: function (self$4347, ns_name$4348) {
                if (_ki.namespaces[ns_name$4348] === undefined) {
                    _ki.namespaces[ns_name$4348] = { vars: {} };
                }
                self$4347._ki_ns_name = ns_name$4348;
                self$4347._ki_ns_ctx = self$4347;
                _ki.intern.bind(self$4347)(_ki.modules.core);
                _ki.intern.bind(self$4347)(_ki.modules.mori);
                _ki.intern.bind(self$4347)(_ki.modules);
                _ki.intern.bind(self$4347)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$4349) {
                for (var e$4350 in obj$4349) {
                    this[e$4350] = obj$4349[e$4350];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$4351) {
                        return x$4351 === false || x$4351 == null ? false : true;
                    },
                    falsey: function (x$4352) {
                        return !truthy(x$4352);
                    },
                    not: function (x$4353) {
                        return !truthy(x$4353);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$4354 = 0;
                        for (var i$4355 = 0; i$4355 < arguments.length; i$4355++) {
                            res$4354 += arguments[i$4355];
                        }
                        return res$4354;
                    },
                    sub: function () {
                        var res$4356 = arguments[0];
                        for (var i$4357 = 1; i$4357 < arguments.length; i$4357++) {
                            res$4356 -= arguments[i$4357];
                        }
                        return res$4356;
                    },
                    mul: function () {
                        var res$4358 = 1;
                        for (var i$4359 = 0; i$4359 < arguments.length; i$4359++) {
                            res$4358 *= arguments[i$4359];
                        }
                        return res$4358;
                    },
                    div: function () {
                        var res$4360 = arguments[0];
                        for (var i$4361 = 1; i$4361 < arguments.length; i$4361++) {
                            res$4360 /= arguments[i$4361];
                        }
                        return res$4360;
                    },
                    mod: function (a$4362, b$4363) {
                        return a$4362 % b$4363;
                    },
                    lt: function () {
                        var res$4364 = true;
                        for (var i$4365 = 0; i$4365 < arguments.length - 1; i$4365++) {
                            res$4364 = res$4364 && arguments[i$4365] < arguments[i$4365 + 1];
                            if (!res$4364)
                                break;
                        }
                        return res$4364;
                    },
                    gt: function () {
                        var res$4366 = true;
                        for (var i$4367 = 0; i$4367 < arguments.length - 1; i$4367++) {
                            res$4366 = res$4366 && arguments[i$4367] > arguments[i$4367 + 1];
                            if (!res$4366)
                                break;
                        }
                        return res$4366;
                    },
                    leq: function () {
                        var res$4368 = true;
                        for (var i$4369 = 0; i$4369 < arguments.length - 1; i$4369++) {
                            res$4368 = res$4368 && arguments[i$4369] <= arguments[i$4369 + 1];
                            if (!res$4368)
                                break;
                        }
                        return res$4368;
                    },
                    geq: function () {
                        var res$4370 = true;
                        for (var i$4371 = 0; i$4371 < arguments.length - 1; i$4371++) {
                            res$4370 = res$4370 && arguments[i$4371] >= arguments[i$4371 + 1];
                        }
                        return res$4370;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$4372) {
                        try {
                            return require('mori');
                        } catch (e$4373) {
                            return mori;
                        }
                    }
                }()
            }
        };
        var a$4343 = {
                bar: function (x$4374) {
                    return x$4374 * 2;
                }
            };
        var b$4344 = {
                foo: function (x$4375) {
                    return a$4343;
                }
            };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return a$4343.bar(2);
        }()).to.eql(4);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return b$4344.foo().bar(2);
        }()).to.eql(4);
    });
});
describe('chaining and doto', function () {
    it('should allow to use JavaScript chained APIs', function () {
        _ki = {
            init: function (self$4406, ns_name$4407) {
                if (_ki.namespaces[ns_name$4407] === undefined) {
                    _ki.namespaces[ns_name$4407] = { vars: {} };
                }
                self$4406._ki_ns_name = ns_name$4407;
                self$4406._ki_ns_ctx = self$4406;
                _ki.intern.bind(self$4406)(_ki.modules.core);
                _ki.intern.bind(self$4406)(_ki.modules.mori);
                _ki.intern.bind(self$4406)(_ki.modules);
                _ki.intern.bind(self$4406)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$4408) {
                for (var e$4409 in obj$4408) {
                    this[e$4409] = obj$4408[e$4409];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$4410) {
                        return x$4410 === false || x$4410 == null ? false : true;
                    },
                    falsey: function (x$4411) {
                        return !truthy(x$4411);
                    },
                    not: function (x$4412) {
                        return !truthy(x$4412);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$4413 = 0;
                        for (var i$4414 = 0; i$4414 < arguments.length; i$4414++) {
                            res$4413 += arguments[i$4414];
                        }
                        return res$4413;
                    },
                    sub: function () {
                        var res$4415 = arguments[0];
                        for (var i$4416 = 1; i$4416 < arguments.length; i$4416++) {
                            res$4415 -= arguments[i$4416];
                        }
                        return res$4415;
                    },
                    mul: function () {
                        var res$4417 = 1;
                        for (var i$4418 = 0; i$4418 < arguments.length; i$4418++) {
                            res$4417 *= arguments[i$4418];
                        }
                        return res$4417;
                    },
                    div: function () {
                        var res$4419 = arguments[0];
                        for (var i$4420 = 1; i$4420 < arguments.length; i$4420++) {
                            res$4419 /= arguments[i$4420];
                        }
                        return res$4419;
                    },
                    mod: function (a$4421, b$4422) {
                        return a$4421 % b$4422;
                    },
                    lt: function () {
                        var res$4423 = true;
                        for (var i$4424 = 0; i$4424 < arguments.length - 1; i$4424++) {
                            res$4423 = res$4423 && arguments[i$4424] < arguments[i$4424 + 1];
                            if (!res$4423)
                                break;
                        }
                        return res$4423;
                    },
                    gt: function () {
                        var res$4425 = true;
                        for (var i$4426 = 0; i$4426 < arguments.length - 1; i$4426++) {
                            res$4425 = res$4425 && arguments[i$4426] > arguments[i$4426 + 1];
                            if (!res$4425)
                                break;
                        }
                        return res$4425;
                    },
                    leq: function () {
                        var res$4427 = true;
                        for (var i$4428 = 0; i$4428 < arguments.length - 1; i$4428++) {
                            res$4427 = res$4427 && arguments[i$4428] <= arguments[i$4428 + 1];
                            if (!res$4427)
                                break;
                        }
                        return res$4427;
                    },
                    geq: function () {
                        var res$4429 = true;
                        for (var i$4430 = 0; i$4430 < arguments.length - 1; i$4430++) {
                            res$4429 = res$4429 && arguments[i$4430] >= arguments[i$4430 + 1];
                        }
                        return res$4429;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$4431) {
                        try {
                            return require('mori');
                        } catch (e$4432) {
                            return mori;
                        }
                    }
                }()
            }
        };
        var A$4402 = function () {
            var self$4433 = this;
            this.v = 'init ';
            this.foo = function (x$4434) {
                self$4433.v += 'foo called with ' + x$4434 + ' ';
                return self$4433;
            };
            this.bar = function (x$4435) {
                self$4433.v += 'bar called with ' + x$4435 + ' ';
                return self$4433;
            };
        };
        var a$4403 = new A$4402();
        var mori$4404 = _ki.modules.mori;
        expect$1466(function () {
            _ki.init(this, '_ki');
            return a$4403.foo(1).bar(2).v;
        }()).to.eql('init foo called with 1 bar called with 2 ');
    });
    it('should allow to repeatedly call methods on a JavaScript object', function () {
        _ki = {
            init: function (self$4459, ns_name$4460) {
                if (_ki.namespaces[ns_name$4460] === undefined) {
                    _ki.namespaces[ns_name$4460] = { vars: {} };
                }
                self$4459._ki_ns_name = ns_name$4460;
                self$4459._ki_ns_ctx = self$4459;
                _ki.intern.bind(self$4459)(_ki.modules.core);
                _ki.intern.bind(self$4459)(_ki.modules.mori);
                _ki.intern.bind(self$4459)(_ki.modules);
                _ki.intern.bind(self$4459)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$4461) {
                for (var e$4462 in obj$4461) {
                    this[e$4462] = obj$4461[e$4462];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$4463) {
                        return x$4463 === false || x$4463 == null ? false : true;
                    },
                    falsey: function (x$4464) {
                        return !truthy(x$4464);
                    },
                    not: function (x$4465) {
                        return !truthy(x$4465);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$4466 = 0;
                        for (var i$4467 = 0; i$4467 < arguments.length; i$4467++) {
                            res$4466 += arguments[i$4467];
                        }
                        return res$4466;
                    },
                    sub: function () {
                        var res$4468 = arguments[0];
                        for (var i$4469 = 1; i$4469 < arguments.length; i$4469++) {
                            res$4468 -= arguments[i$4469];
                        }
                        return res$4468;
                    },
                    mul: function () {
                        var res$4470 = 1;
                        for (var i$4471 = 0; i$4471 < arguments.length; i$4471++) {
                            res$4470 *= arguments[i$4471];
                        }
                        return res$4470;
                    },
                    div: function () {
                        var res$4472 = arguments[0];
                        for (var i$4473 = 1; i$4473 < arguments.length; i$4473++) {
                            res$4472 /= arguments[i$4473];
                        }
                        return res$4472;
                    },
                    mod: function (a$4474, b$4475) {
                        return a$4474 % b$4475;
                    },
                    lt: function () {
                        var res$4476 = true;
                        for (var i$4477 = 0; i$4477 < arguments.length - 1; i$4477++) {
                            res$4476 = res$4476 && arguments[i$4477] < arguments[i$4477 + 1];
                            if (!res$4476)
                                break;
                        }
                        return res$4476;
                    },
                    gt: function () {
                        var res$4478 = true;
                        for (var i$4479 = 0; i$4479 < arguments.length - 1; i$4479++) {
                            res$4478 = res$4478 && arguments[i$4479] > arguments[i$4479 + 1];
                            if (!res$4478)
                                break;
                        }
                        return res$4478;
                    },
                    leq: function () {
                        var res$4480 = true;
                        for (var i$4481 = 0; i$4481 < arguments.length - 1; i$4481++) {
                            res$4480 = res$4480 && arguments[i$4481] <= arguments[i$4481 + 1];
                            if (!res$4480)
                                break;
                        }
                        return res$4480;
                    },
                    geq: function () {
                        var res$4482 = true;
                        for (var i$4483 = 0; i$4483 < arguments.length - 1; i$4483++) {
                            res$4482 = res$4482 && arguments[i$4483] >= arguments[i$4483 + 1];
                        }
                        return res$4482;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$4484) {
                        try {
                            return require('mori');
                        } catch (e$4485) {
                            return mori;
                        }
                    }
                }()
            }
        };
        var A$4455 = function () {
            var self$4486 = this;
            this.foo = null;
            this.bar = null;
            this.setFoo = function (x$4487) {
                self$4486.foo = x$4487;
            };
            this.setBar = function (x$4488) {
                self$4486.bar = x$4488;
            };
            this.getFooBar = function () {
                return self$4486.foo + ' ' + self$4486.bar;
            };
        };
        var a$4456 = new A$4455();
        var mori$4457 = _ki.modules.mori;
        expect$1466(function () {
            _ki.init(this, '_ki');
            return function () {
                a$4456.setFoo('a');
                a$4456.setBar('b');
                return a$4456;
            }.call(this);
        }().getFooBar()).to.eql('a b');
    });
});
describe('threading', function () {
    it('should allow to thread first a value through a sequence of computations', function () {
        _ki = {
            init: function (self$4503, ns_name$4504) {
                if (_ki.namespaces[ns_name$4504] === undefined) {
                    _ki.namespaces[ns_name$4504] = { vars: {} };
                }
                self$4503._ki_ns_name = ns_name$4504;
                self$4503._ki_ns_ctx = self$4503;
                _ki.intern.bind(self$4503)(_ki.modules.core);
                _ki.intern.bind(self$4503)(_ki.modules.mori);
                _ki.intern.bind(self$4503)(_ki.modules);
                _ki.intern.bind(self$4503)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$4505) {
                for (var e$4506 in obj$4505) {
                    this[e$4506] = obj$4505[e$4506];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$4507) {
                        return x$4507 === false || x$4507 == null ? false : true;
                    },
                    falsey: function (x$4508) {
                        return !truthy(x$4508);
                    },
                    not: function (x$4509) {
                        return !truthy(x$4509);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$4510 = 0;
                        for (var i$4511 = 0; i$4511 < arguments.length; i$4511++) {
                            res$4510 += arguments[i$4511];
                        }
                        return res$4510;
                    },
                    sub: function () {
                        var res$4512 = arguments[0];
                        for (var i$4513 = 1; i$4513 < arguments.length; i$4513++) {
                            res$4512 -= arguments[i$4513];
                        }
                        return res$4512;
                    },
                    mul: function () {
                        var res$4514 = 1;
                        for (var i$4515 = 0; i$4515 < arguments.length; i$4515++) {
                            res$4514 *= arguments[i$4515];
                        }
                        return res$4514;
                    },
                    div: function () {
                        var res$4516 = arguments[0];
                        for (var i$4517 = 1; i$4517 < arguments.length; i$4517++) {
                            res$4516 /= arguments[i$4517];
                        }
                        return res$4516;
                    },
                    mod: function (a$4518, b$4519) {
                        return a$4518 % b$4519;
                    },
                    lt: function () {
                        var res$4520 = true;
                        for (var i$4521 = 0; i$4521 < arguments.length - 1; i$4521++) {
                            res$4520 = res$4520 && arguments[i$4521] < arguments[i$4521 + 1];
                            if (!res$4520)
                                break;
                        }
                        return res$4520;
                    },
                    gt: function () {
                        var res$4522 = true;
                        for (var i$4523 = 0; i$4523 < arguments.length - 1; i$4523++) {
                            res$4522 = res$4522 && arguments[i$4523] > arguments[i$4523 + 1];
                            if (!res$4522)
                                break;
                        }
                        return res$4522;
                    },
                    leq: function () {
                        var res$4524 = true;
                        for (var i$4525 = 0; i$4525 < arguments.length - 1; i$4525++) {
                            res$4524 = res$4524 && arguments[i$4525] <= arguments[i$4525 + 1];
                            if (!res$4524)
                                break;
                        }
                        return res$4524;
                    },
                    geq: function () {
                        var res$4526 = true;
                        for (var i$4527 = 0; i$4527 < arguments.length - 1; i$4527++) {
                            res$4526 = res$4526 && arguments[i$4527] >= arguments[i$4527 + 1];
                        }
                        return res$4526;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$4528) {
                        try {
                            return require('mori');
                        } catch (e$4529) {
                            return mori;
                        }
                    }
                }()
            }
        };
        var a$4499 = 1;
        expect$1466(function () {
            _ki.init(this, '_ki');
            return dec(inc(inc(a$4499)));
        }()).to.eql(2);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return sum(sum(a$4499, 2), 3);
        }()).to.eql(6);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return first(conj(vector(), 1));
        }()).to.eql(1);
    });
    it('should allow to thread last a value through a sequence of computations', function () {
        _ki = {
            init: function (self$4635, ns_name$4636) {
                if (_ki.namespaces[ns_name$4636] === undefined) {
                    _ki.namespaces[ns_name$4636] = { vars: {} };
                }
                self$4635._ki_ns_name = ns_name$4636;
                self$4635._ki_ns_ctx = self$4635;
                _ki.intern.bind(self$4635)(_ki.modules.core);
                _ki.intern.bind(self$4635)(_ki.modules.mori);
                _ki.intern.bind(self$4635)(_ki.modules);
                _ki.intern.bind(self$4635)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$4637) {
                for (var e$4638 in obj$4637) {
                    this[e$4638] = obj$4637[e$4638];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$4639) {
                        return x$4639 === false || x$4639 == null ? false : true;
                    },
                    falsey: function (x$4640) {
                        return !truthy(x$4640);
                    },
                    not: function (x$4641) {
                        return !truthy(x$4641);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$4642 = 0;
                        for (var i$4643 = 0; i$4643 < arguments.length; i$4643++) {
                            res$4642 += arguments[i$4643];
                        }
                        return res$4642;
                    },
                    sub: function () {
                        var res$4644 = arguments[0];
                        for (var i$4645 = 1; i$4645 < arguments.length; i$4645++) {
                            res$4644 -= arguments[i$4645];
                        }
                        return res$4644;
                    },
                    mul: function () {
                        var res$4646 = 1;
                        for (var i$4647 = 0; i$4647 < arguments.length; i$4647++) {
                            res$4646 *= arguments[i$4647];
                        }
                        return res$4646;
                    },
                    div: function () {
                        var res$4648 = arguments[0];
                        for (var i$4649 = 1; i$4649 < arguments.length; i$4649++) {
                            res$4648 /= arguments[i$4649];
                        }
                        return res$4648;
                    },
                    mod: function (a$4650, b$4651) {
                        return a$4650 % b$4651;
                    },
                    lt: function () {
                        var res$4652 = true;
                        for (var i$4653 = 0; i$4653 < arguments.length - 1; i$4653++) {
                            res$4652 = res$4652 && arguments[i$4653] < arguments[i$4653 + 1];
                            if (!res$4652)
                                break;
                        }
                        return res$4652;
                    },
                    gt: function () {
                        var res$4654 = true;
                        for (var i$4655 = 0; i$4655 < arguments.length - 1; i$4655++) {
                            res$4654 = res$4654 && arguments[i$4655] > arguments[i$4655 + 1];
                            if (!res$4654)
                                break;
                        }
                        return res$4654;
                    },
                    leq: function () {
                        var res$4656 = true;
                        for (var i$4657 = 0; i$4657 < arguments.length - 1; i$4657++) {
                            res$4656 = res$4656 && arguments[i$4657] <= arguments[i$4657 + 1];
                            if (!res$4656)
                                break;
                        }
                        return res$4656;
                    },
                    geq: function () {
                        var res$4658 = true;
                        for (var i$4659 = 0; i$4659 < arguments.length - 1; i$4659++) {
                            res$4658 = res$4658 && arguments[i$4659] >= arguments[i$4659 + 1];
                        }
                        return res$4658;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$4660) {
                        try {
                            return require('mori');
                        } catch (e$4661) {
                            return mori;
                        }
                    }
                }()
            }
        };
        var a$4633 = 1;
        expect$1466(function () {
            _ki.init(this, '_ki');
            return first(map(function (x$4768) {
                return inc(x$4768);
            }, conj(vector(), a$4633)));
        }()).to.eql(2);
    });
});
describe('math operations', function () {
    it('should allow to add, subtract, multiply, divide a sequence of numbers and compute the modulo of two numbers', function () {
        _ki = {
            init: function (self$4793, ns_name$4794) {
                if (_ki.namespaces[ns_name$4794] === undefined) {
                    _ki.namespaces[ns_name$4794] = { vars: {} };
                }
                self$4793._ki_ns_name = ns_name$4794;
                self$4793._ki_ns_ctx = self$4793;
                _ki.intern.bind(self$4793)(_ki.modules.core);
                _ki.intern.bind(self$4793)(_ki.modules.mori);
                _ki.intern.bind(self$4793)(_ki.modules);
                _ki.intern.bind(self$4793)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$4795) {
                for (var e$4796 in obj$4795) {
                    this[e$4796] = obj$4795[e$4796];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$4797) {
                        return x$4797 === false || x$4797 == null ? false : true;
                    },
                    falsey: function (x$4798) {
                        return !truthy(x$4798);
                    },
                    not: function (x$4799) {
                        return !truthy(x$4799);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$4800 = 0;
                        for (var i$4801 = 0; i$4801 < arguments.length; i$4801++) {
                            res$4800 += arguments[i$4801];
                        }
                        return res$4800;
                    },
                    sub: function () {
                        var res$4802 = arguments[0];
                        for (var i$4803 = 1; i$4803 < arguments.length; i$4803++) {
                            res$4802 -= arguments[i$4803];
                        }
                        return res$4802;
                    },
                    mul: function () {
                        var res$4804 = 1;
                        for (var i$4805 = 0; i$4805 < arguments.length; i$4805++) {
                            res$4804 *= arguments[i$4805];
                        }
                        return res$4804;
                    },
                    div: function () {
                        var res$4806 = arguments[0];
                        for (var i$4807 = 1; i$4807 < arguments.length; i$4807++) {
                            res$4806 /= arguments[i$4807];
                        }
                        return res$4806;
                    },
                    mod: function (a$4808, b$4809) {
                        return a$4808 % b$4809;
                    },
                    lt: function () {
                        var res$4810 = true;
                        for (var i$4811 = 0; i$4811 < arguments.length - 1; i$4811++) {
                            res$4810 = res$4810 && arguments[i$4811] < arguments[i$4811 + 1];
                            if (!res$4810)
                                break;
                        }
                        return res$4810;
                    },
                    gt: function () {
                        var res$4812 = true;
                        for (var i$4813 = 0; i$4813 < arguments.length - 1; i$4813++) {
                            res$4812 = res$4812 && arguments[i$4813] > arguments[i$4813 + 1];
                            if (!res$4812)
                                break;
                        }
                        return res$4812;
                    },
                    leq: function () {
                        var res$4814 = true;
                        for (var i$4815 = 0; i$4815 < arguments.length - 1; i$4815++) {
                            res$4814 = res$4814 && arguments[i$4815] <= arguments[i$4815 + 1];
                            if (!res$4814)
                                break;
                        }
                        return res$4814;
                    },
                    geq: function () {
                        var res$4816 = true;
                        for (var i$4817 = 0; i$4817 < arguments.length - 1; i$4817++) {
                            res$4816 = res$4816 && arguments[i$4817] >= arguments[i$4817 + 1];
                        }
                        return res$4816;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$4818) {
                        try {
                            return require('mori');
                        } catch (e$4819) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return add(1, 2, 3);
        }()).to.eql(6);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return sub(3, 2, 1);
        }()).to.eql(0);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return mul(1, 2, 3);
        }()).to.eql(6);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return div(3, 2, 1);
        }()).to.eql(1.5);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return mod(3, 2);
        }()).to.eql(1);
    });
    it('should allow to compare sequences of numbers', function () {
        _ki = {
            init: function (self$4890, ns_name$4891) {
                if (_ki.namespaces[ns_name$4891] === undefined) {
                    _ki.namespaces[ns_name$4891] = { vars: {} };
                }
                self$4890._ki_ns_name = ns_name$4891;
                self$4890._ki_ns_ctx = self$4890;
                _ki.intern.bind(self$4890)(_ki.modules.core);
                _ki.intern.bind(self$4890)(_ki.modules.mori);
                _ki.intern.bind(self$4890)(_ki.modules);
                _ki.intern.bind(self$4890)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$4892) {
                for (var e$4893 in obj$4892) {
                    this[e$4893] = obj$4892[e$4893];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$4894) {
                        return x$4894 === false || x$4894 == null ? false : true;
                    },
                    falsey: function (x$4895) {
                        return !truthy(x$4895);
                    },
                    not: function (x$4896) {
                        return !truthy(x$4896);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$4897 = 0;
                        for (var i$4898 = 0; i$4898 < arguments.length; i$4898++) {
                            res$4897 += arguments[i$4898];
                        }
                        return res$4897;
                    },
                    sub: function () {
                        var res$4899 = arguments[0];
                        for (var i$4900 = 1; i$4900 < arguments.length; i$4900++) {
                            res$4899 -= arguments[i$4900];
                        }
                        return res$4899;
                    },
                    mul: function () {
                        var res$4901 = 1;
                        for (var i$4902 = 0; i$4902 < arguments.length; i$4902++) {
                            res$4901 *= arguments[i$4902];
                        }
                        return res$4901;
                    },
                    div: function () {
                        var res$4903 = arguments[0];
                        for (var i$4904 = 1; i$4904 < arguments.length; i$4904++) {
                            res$4903 /= arguments[i$4904];
                        }
                        return res$4903;
                    },
                    mod: function (a$4905, b$4906) {
                        return a$4905 % b$4906;
                    },
                    lt: function () {
                        var res$4907 = true;
                        for (var i$4908 = 0; i$4908 < arguments.length - 1; i$4908++) {
                            res$4907 = res$4907 && arguments[i$4908] < arguments[i$4908 + 1];
                            if (!res$4907)
                                break;
                        }
                        return res$4907;
                    },
                    gt: function () {
                        var res$4909 = true;
                        for (var i$4910 = 0; i$4910 < arguments.length - 1; i$4910++) {
                            res$4909 = res$4909 && arguments[i$4910] > arguments[i$4910 + 1];
                            if (!res$4909)
                                break;
                        }
                        return res$4909;
                    },
                    leq: function () {
                        var res$4911 = true;
                        for (var i$4912 = 0; i$4912 < arguments.length - 1; i$4912++) {
                            res$4911 = res$4911 && arguments[i$4912] <= arguments[i$4912 + 1];
                            if (!res$4911)
                                break;
                        }
                        return res$4911;
                    },
                    geq: function () {
                        var res$4913 = true;
                        for (var i$4914 = 0; i$4914 < arguments.length - 1; i$4914++) {
                            res$4913 = res$4913 && arguments[i$4914] >= arguments[i$4914 + 1];
                        }
                        return res$4913;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$4915) {
                        try {
                            return require('mori');
                        } catch (e$4916) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return lt(1, 2, 3);
        }()).to.eql(true);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return lt(3, 2, 1);
        }()).to.eql(false);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return lt(1, 2, 2);
        }()).to.eql(false);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return gt(1, 2, 3);
        }()).to.eql(false);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return gt(3, 2, 1);
        }()).to.eql(true);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return gt(3, 2, 2);
        }()).to.eql(false);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return leq(1, 2, 3);
        }()).to.eql(true);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return leq(3, 2, 1);
        }()).to.eql(false);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return leq(1, 2, 2);
        }()).to.eql(true);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return geq(1, 2, 3);
        }()).to.eql(false);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return geq(3, 2, 1);
        }()).to.eql(true);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return geq(3, 2, 2);
        }()).to.eql(true);
    });
});
describe('continuations', function () {
    it('should allow to write asynchronous code in a synchronous fashion', function () {
        _ki = {
            init: function (self$5069, ns_name$5070) {
                if (_ki.namespaces[ns_name$5070] === undefined) {
                    _ki.namespaces[ns_name$5070] = { vars: {} };
                }
                self$5069._ki_ns_name = ns_name$5070;
                self$5069._ki_ns_ctx = self$5069;
                _ki.intern.bind(self$5069)(_ki.modules.core);
                _ki.intern.bind(self$5069)(_ki.modules.mori);
                _ki.intern.bind(self$5069)(_ki.modules);
                _ki.intern.bind(self$5069)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$5071) {
                for (var e$5072 in obj$5071) {
                    this[e$5072] = obj$5071[e$5072];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$5073) {
                        return x$5073 === false || x$5073 == null ? false : true;
                    },
                    falsey: function (x$5074) {
                        return !truthy(x$5074);
                    },
                    not: function (x$5075) {
                        return !truthy(x$5075);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$5076 = 0;
                        for (var i$5077 = 0; i$5077 < arguments.length; i$5077++) {
                            res$5076 += arguments[i$5077];
                        }
                        return res$5076;
                    },
                    sub: function () {
                        var res$5078 = arguments[0];
                        for (var i$5079 = 1; i$5079 < arguments.length; i$5079++) {
                            res$5078 -= arguments[i$5079];
                        }
                        return res$5078;
                    },
                    mul: function () {
                        var res$5080 = 1;
                        for (var i$5081 = 0; i$5081 < arguments.length; i$5081++) {
                            res$5080 *= arguments[i$5081];
                        }
                        return res$5080;
                    },
                    div: function () {
                        var res$5082 = arguments[0];
                        for (var i$5083 = 1; i$5083 < arguments.length; i$5083++) {
                            res$5082 /= arguments[i$5083];
                        }
                        return res$5082;
                    },
                    mod: function (a$5084, b$5085) {
                        return a$5084 % b$5085;
                    },
                    lt: function () {
                        var res$5086 = true;
                        for (var i$5087 = 0; i$5087 < arguments.length - 1; i$5087++) {
                            res$5086 = res$5086 && arguments[i$5087] < arguments[i$5087 + 1];
                            if (!res$5086)
                                break;
                        }
                        return res$5086;
                    },
                    gt: function () {
                        var res$5088 = true;
                        for (var i$5089 = 0; i$5089 < arguments.length - 1; i$5089++) {
                            res$5088 = res$5088 && arguments[i$5089] > arguments[i$5089 + 1];
                            if (!res$5088)
                                break;
                        }
                        return res$5088;
                    },
                    leq: function () {
                        var res$5090 = true;
                        for (var i$5091 = 0; i$5091 < arguments.length - 1; i$5091++) {
                            res$5090 = res$5090 && arguments[i$5091] <= arguments[i$5091 + 1];
                            if (!res$5090)
                                break;
                        }
                        return res$5090;
                    },
                    geq: function () {
                        var res$5092 = true;
                        for (var i$5093 = 0; i$5093 < arguments.length - 1; i$5093++) {
                            res$5092 = res$5092 && arguments[i$5093] >= arguments[i$5093 + 1];
                        }
                        return res$5092;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$5094) {
                        try {
                            return require('mori');
                        } catch (e$5095) {
                            return mori;
                        }
                    }
                }()
            }
        };
        var foo$5062 = function (x$5096, cb$5097) {
            var y$5098 = x$5096 * 2;
            cb$5097(y$5098);
        };
        var bar$5063 = function (x$5099, cb$5100) {
            var y$5101 = x$5099 + 1;
            cb$5100(y$5101);
        };
        var baz$5064 = function (x$5102, cb$5103) {
            var y$5104 = x$5102 + 1;
            var z$5105 = x$5102 * 2;
            cb$5103(y$5104, z$5105);
        };
        (function () {
            _ki.init(this, '_ki');
            return foo$5062(2, function (a$5116) {
                bar$5063(a$5116, function (b$5131) {
                    baz$5064(b$5131, function (c$5146, d$5147) {
                        expect$1466(b$5131).to.eql(5);
                        expect$1466(c$5146).to.eql(6);
                        expect$1466(d$5147).to.eql(10);
                        return null;
                    });
                    return null;
                });
                return null;
            });
        }());
        _ki = {
            init: function (self$5157, ns_name$5158) {
                if (_ki.namespaces[ns_name$5158] === undefined) {
                    _ki.namespaces[ns_name$5158] = { vars: {} };
                }
                self$5157._ki_ns_name = ns_name$5158;
                self$5157._ki_ns_ctx = self$5157;
                _ki.intern.bind(self$5157)(_ki.modules.core);
                _ki.intern.bind(self$5157)(_ki.modules.mori);
                _ki.intern.bind(self$5157)(_ki.modules);
                _ki.intern.bind(self$5157)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$5159) {
                for (var e$5160 in obj$5159) {
                    this[e$5160] = obj$5159[e$5160];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$5161) {
                        return x$5161 === false || x$5161 == null ? false : true;
                    },
                    falsey: function (x$5162) {
                        return !truthy(x$5162);
                    },
                    not: function (x$5163) {
                        return !truthy(x$5163);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$5164 = 0;
                        for (var i$5165 = 0; i$5165 < arguments.length; i$5165++) {
                            res$5164 += arguments[i$5165];
                        }
                        return res$5164;
                    },
                    sub: function () {
                        var res$5166 = arguments[0];
                        for (var i$5167 = 1; i$5167 < arguments.length; i$5167++) {
                            res$5166 -= arguments[i$5167];
                        }
                        return res$5166;
                    },
                    mul: function () {
                        var res$5168 = 1;
                        for (var i$5169 = 0; i$5169 < arguments.length; i$5169++) {
                            res$5168 *= arguments[i$5169];
                        }
                        return res$5168;
                    },
                    div: function () {
                        var res$5170 = arguments[0];
                        for (var i$5171 = 1; i$5171 < arguments.length; i$5171++) {
                            res$5170 /= arguments[i$5171];
                        }
                        return res$5170;
                    },
                    mod: function (a$5172, b$5173) {
                        return a$5172 % b$5173;
                    },
                    lt: function () {
                        var res$5174 = true;
                        for (var i$5175 = 0; i$5175 < arguments.length - 1; i$5175++) {
                            res$5174 = res$5174 && arguments[i$5175] < arguments[i$5175 + 1];
                            if (!res$5174)
                                break;
                        }
                        return res$5174;
                    },
                    gt: function () {
                        var res$5176 = true;
                        for (var i$5177 = 0; i$5177 < arguments.length - 1; i$5177++) {
                            res$5176 = res$5176 && arguments[i$5177] > arguments[i$5177 + 1];
                            if (!res$5176)
                                break;
                        }
                        return res$5176;
                    },
                    leq: function () {
                        var res$5178 = true;
                        for (var i$5179 = 0; i$5179 < arguments.length - 1; i$5179++) {
                            res$5178 = res$5178 && arguments[i$5179] <= arguments[i$5179 + 1];
                            if (!res$5178)
                                break;
                        }
                        return res$5178;
                    },
                    geq: function () {
                        var res$5180 = true;
                        for (var i$5181 = 0; i$5181 < arguments.length - 1; i$5181++) {
                            res$5180 = res$5180 && arguments[i$5181] >= arguments[i$5181 + 1];
                        }
                        return res$5180;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$5182) {
                        try {
                            return require('mori');
                        } catch (e$5183) {
                            return mori;
                        }
                    }
                }()
            }
        };
        var log$5067 = '';
        (function () {
            _ki.init(this, '_ki');
            return function () {
                (function () {
                    _ki_ns_ctx['fake_request'] = function (url$5203, cb$5204) {
                        return setTimeout(function () {
                            return cb$5204(1234);
                        }, 1000);
                    };
                    _ki.namespaces[_ki_ns_name].vars.fake_request = _ki_ns_ctx['fake_request'];
                    return _ki_ns_ctx['fake_request'];
                }());
                fake_request('fakeurl', function (data$5221) {
                    log$5067 += 'Response received: ' + data$5221 + '.';
                    expect$1466(log$5067).to.eql('Request sent. Response received: 1234.');
                    return null;
                });
                return log$5067 += 'Request sent. ';
            }.call(this);
        }());
        expect$1466(log$5067).to.eql('Request sent. ');
    });
});
describe('apply', function () {
    it('should call a function given a list of arguments supplied as a collection', function () {
        _ki = {
            init: function (self$5232, ns_name$5233) {
                if (_ki.namespaces[ns_name$5233] === undefined) {
                    _ki.namespaces[ns_name$5233] = { vars: {} };
                }
                self$5232._ki_ns_name = ns_name$5233;
                self$5232._ki_ns_ctx = self$5232;
                _ki.intern.bind(self$5232)(_ki.modules.core);
                _ki.intern.bind(self$5232)(_ki.modules.mori);
                _ki.intern.bind(self$5232)(_ki.modules);
                _ki.intern.bind(self$5232)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$5234) {
                for (var e$5235 in obj$5234) {
                    this[e$5235] = obj$5234[e$5235];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$5236) {
                        return x$5236 === false || x$5236 == null ? false : true;
                    },
                    falsey: function (x$5237) {
                        return !truthy(x$5237);
                    },
                    not: function (x$5238) {
                        return !truthy(x$5238);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$5239 = 0;
                        for (var i$5240 = 0; i$5240 < arguments.length; i$5240++) {
                            res$5239 += arguments[i$5240];
                        }
                        return res$5239;
                    },
                    sub: function () {
                        var res$5241 = arguments[0];
                        for (var i$5242 = 1; i$5242 < arguments.length; i$5242++) {
                            res$5241 -= arguments[i$5242];
                        }
                        return res$5241;
                    },
                    mul: function () {
                        var res$5243 = 1;
                        for (var i$5244 = 0; i$5244 < arguments.length; i$5244++) {
                            res$5243 *= arguments[i$5244];
                        }
                        return res$5243;
                    },
                    div: function () {
                        var res$5245 = arguments[0];
                        for (var i$5246 = 1; i$5246 < arguments.length; i$5246++) {
                            res$5245 /= arguments[i$5246];
                        }
                        return res$5245;
                    },
                    mod: function (a$5247, b$5248) {
                        return a$5247 % b$5248;
                    },
                    lt: function () {
                        var res$5249 = true;
                        for (var i$5250 = 0; i$5250 < arguments.length - 1; i$5250++) {
                            res$5249 = res$5249 && arguments[i$5250] < arguments[i$5250 + 1];
                            if (!res$5249)
                                break;
                        }
                        return res$5249;
                    },
                    gt: function () {
                        var res$5251 = true;
                        for (var i$5252 = 0; i$5252 < arguments.length - 1; i$5252++) {
                            res$5251 = res$5251 && arguments[i$5252] > arguments[i$5252 + 1];
                            if (!res$5251)
                                break;
                        }
                        return res$5251;
                    },
                    leq: function () {
                        var res$5253 = true;
                        for (var i$5254 = 0; i$5254 < arguments.length - 1; i$5254++) {
                            res$5253 = res$5253 && arguments[i$5254] <= arguments[i$5254 + 1];
                            if (!res$5253)
                                break;
                        }
                        return res$5253;
                    },
                    geq: function () {
                        var res$5255 = true;
                        for (var i$5256 = 0; i$5256 < arguments.length - 1; i$5256++) {
                            res$5255 = res$5255 && arguments[i$5256] >= arguments[i$5256 + 1];
                        }
                        return res$5255;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$5257) {
                        try {
                            return require('mori');
                        } catch (e$5258) {
                            return mori;
                        }
                    }
                }()
            }
        };
        var mori$5230 = _ki.modules.mori;
        expect$1466(function () {
            _ki.init(this, '_ki');
            return list.apply(this, clj_to_js(vector(1, 2, 3, 4)));
        }()).to.eql(mori$5230.list(1, 2, 3, 4));
    });
});
describe('bind', function () {
    it('should return a function with this set to the provided object', function () {
        _ki = {
            init: function (self$5286, ns_name$5287) {
                if (_ki.namespaces[ns_name$5287] === undefined) {
                    _ki.namespaces[ns_name$5287] = { vars: {} };
                }
                self$5286._ki_ns_name = ns_name$5287;
                self$5286._ki_ns_ctx = self$5286;
                _ki.intern.bind(self$5286)(_ki.modules.core);
                _ki.intern.bind(self$5286)(_ki.modules.mori);
                _ki.intern.bind(self$5286)(_ki.modules);
                _ki.intern.bind(self$5286)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$5288) {
                for (var e$5289 in obj$5288) {
                    this[e$5289] = obj$5288[e$5289];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$5290) {
                        return x$5290 === false || x$5290 == null ? false : true;
                    },
                    falsey: function (x$5291) {
                        return !truthy(x$5291);
                    },
                    not: function (x$5292) {
                        return !truthy(x$5292);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$5293 = 0;
                        for (var i$5294 = 0; i$5294 < arguments.length; i$5294++) {
                            res$5293 += arguments[i$5294];
                        }
                        return res$5293;
                    },
                    sub: function () {
                        var res$5295 = arguments[0];
                        for (var i$5296 = 1; i$5296 < arguments.length; i$5296++) {
                            res$5295 -= arguments[i$5296];
                        }
                        return res$5295;
                    },
                    mul: function () {
                        var res$5297 = 1;
                        for (var i$5298 = 0; i$5298 < arguments.length; i$5298++) {
                            res$5297 *= arguments[i$5298];
                        }
                        return res$5297;
                    },
                    div: function () {
                        var res$5299 = arguments[0];
                        for (var i$5300 = 1; i$5300 < arguments.length; i$5300++) {
                            res$5299 /= arguments[i$5300];
                        }
                        return res$5299;
                    },
                    mod: function (a$5301, b$5302) {
                        return a$5301 % b$5302;
                    },
                    lt: function () {
                        var res$5303 = true;
                        for (var i$5304 = 0; i$5304 < arguments.length - 1; i$5304++) {
                            res$5303 = res$5303 && arguments[i$5304] < arguments[i$5304 + 1];
                            if (!res$5303)
                                break;
                        }
                        return res$5303;
                    },
                    gt: function () {
                        var res$5305 = true;
                        for (var i$5306 = 0; i$5306 < arguments.length - 1; i$5306++) {
                            res$5305 = res$5305 && arguments[i$5306] > arguments[i$5306 + 1];
                            if (!res$5305)
                                break;
                        }
                        return res$5305;
                    },
                    leq: function () {
                        var res$5307 = true;
                        for (var i$5308 = 0; i$5308 < arguments.length - 1; i$5308++) {
                            res$5307 = res$5307 && arguments[i$5308] <= arguments[i$5308 + 1];
                            if (!res$5307)
                                break;
                        }
                        return res$5307;
                    },
                    geq: function () {
                        var res$5309 = true;
                        for (var i$5310 = 0; i$5310 < arguments.length - 1; i$5310++) {
                            res$5309 = res$5309 && arguments[i$5310] >= arguments[i$5310 + 1];
                        }
                        return res$5309;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$5311) {
                        try {
                            return require('mori');
                        } catch (e$5312) {
                            return mori;
                        }
                    }
                }()
            }
        };
        (function () {
            _ki.init(this, '_ki');
            return function () {
                (function () {
                    _ki_ns_ctx['a'] = hash_map(keyword('a'), 1, keyword('b'), 2);
                    _ki.namespaces[_ki_ns_name].vars.a = _ki_ns_ctx['a'];
                    return _ki_ns_ctx['a'];
                }());
                return function () {
                    _ki_ns_ctx['f'] = function () {
                        return get(this, keyword('a'));
                    };
                    _ki.namespaces[_ki_ns_name].vars.f = _ki_ns_ctx['f'];
                    return _ki_ns_ctx['f'];
                }();
            }.call(this);
        }());
        expect$1466(function () {
            _ki.init(this, '_ki');
            return f.bind(a)();
        }()).to.eql(1);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return function () {
                return get(this, keyword('a'));
            }.bind(a)();
        }()).to.eql(1);
    });
});
describe('multimethods', function () {
    it('should allow to define functions that dispatch according to the result of the evaluation of another function', function () {
        _ki = {
            init: function (self$5400, ns_name$5401) {
                if (_ki.namespaces[ns_name$5401] === undefined) {
                    _ki.namespaces[ns_name$5401] = { vars: {} };
                }
                self$5400._ki_ns_name = ns_name$5401;
                self$5400._ki_ns_ctx = self$5400;
                _ki.intern.bind(self$5400)(_ki.modules.core);
                _ki.intern.bind(self$5400)(_ki.modules.mori);
                _ki.intern.bind(self$5400)(_ki.modules);
                _ki.intern.bind(self$5400)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$5402) {
                for (var e$5403 in obj$5402) {
                    this[e$5403] = obj$5402[e$5403];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$5404) {
                        return x$5404 === false || x$5404 == null ? false : true;
                    },
                    falsey: function (x$5405) {
                        return !truthy(x$5405);
                    },
                    not: function (x$5406) {
                        return !truthy(x$5406);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$5407 = 0;
                        for (var i$5408 = 0; i$5408 < arguments.length; i$5408++) {
                            res$5407 += arguments[i$5408];
                        }
                        return res$5407;
                    },
                    sub: function () {
                        var res$5409 = arguments[0];
                        for (var i$5410 = 1; i$5410 < arguments.length; i$5410++) {
                            res$5409 -= arguments[i$5410];
                        }
                        return res$5409;
                    },
                    mul: function () {
                        var res$5411 = 1;
                        for (var i$5412 = 0; i$5412 < arguments.length; i$5412++) {
                            res$5411 *= arguments[i$5412];
                        }
                        return res$5411;
                    },
                    div: function () {
                        var res$5413 = arguments[0];
                        for (var i$5414 = 1; i$5414 < arguments.length; i$5414++) {
                            res$5413 /= arguments[i$5414];
                        }
                        return res$5413;
                    },
                    mod: function (a$5415, b$5416) {
                        return a$5415 % b$5416;
                    },
                    lt: function () {
                        var res$5417 = true;
                        for (var i$5418 = 0; i$5418 < arguments.length - 1; i$5418++) {
                            res$5417 = res$5417 && arguments[i$5418] < arguments[i$5418 + 1];
                            if (!res$5417)
                                break;
                        }
                        return res$5417;
                    },
                    gt: function () {
                        var res$5419 = true;
                        for (var i$5420 = 0; i$5420 < arguments.length - 1; i$5420++) {
                            res$5419 = res$5419 && arguments[i$5420] > arguments[i$5420 + 1];
                            if (!res$5419)
                                break;
                        }
                        return res$5419;
                    },
                    leq: function () {
                        var res$5421 = true;
                        for (var i$5422 = 0; i$5422 < arguments.length - 1; i$5422++) {
                            res$5421 = res$5421 && arguments[i$5422] <= arguments[i$5422 + 1];
                            if (!res$5421)
                                break;
                        }
                        return res$5421;
                    },
                    geq: function () {
                        var res$5423 = true;
                        for (var i$5424 = 0; i$5424 < arguments.length - 1; i$5424++) {
                            res$5423 = res$5423 && arguments[i$5424] >= arguments[i$5424 + 1];
                        }
                        return res$5423;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$5425) {
                        try {
                            return require('mori');
                        } catch (e$5426) {
                            return mori;
                        }
                    }
                }()
            }
        };
        (function () {
            _ki.init(this, '_ki');
            return function () {
                (function () {
                    _ki_ns_ctx['boss'] = function () {
                        if (boss._ki_methods === undefined || boss._ki_methods.length == 0) {
                            return undefined;
                        }
                        var dispatch_fn$5441 = function (x$5446) {
                            return get(x$5446, keyword('type'));
                        };
                        for (var i$5442 = 0; i$5442 < boss._ki_methods.length; i$5442++) {
                            var dispatch_value$5461 = boss._ki_methods[i$5442][0];
                            var fn$5462 = boss._ki_methods[i$5442][1];
                            if (equals(dispatch_fn$5441.apply(this, arguments), dispatch_value$5461)) {
                                return fn$5462.apply(this, arguments);
                            }
                        }
                        ;
                        return null;
                    };
                    _ki.namespaces[_ki_ns_name].vars.boss = _ki_ns_ctx['boss'];
                    return _ki_ns_ctx['boss'];
                }());
                (function () {
                    if (boss._ki_methods === undefined) {
                        boss._ki_methods = [];
                    }
                    boss._ki_methods.push([
                        keyword('employee'),
                        function (x$5470) {
                            return get(x$5470, keyword('employer'));
                        }
                    ]);
                }());
                return function () {
                    if (boss._ki_methods === undefined) {
                        boss._ki_methods = [];
                    }
                    boss._ki_methods.push([
                        keyword('employer'),
                        function (x$5492) {
                            return get(x$5492, keyword('name'));
                        }
                    ]);
                }();
            }.call(this);
        }());
        expect$1466(function () {
            _ki.init(this, '_ki');
            return boss(hash_map(keyword('type'), keyword('employee'), keyword('name'), 'Barnie', keyword('employer'), 'Fred'));
        }()).to.eql('Fred');
        expect$1466(function () {
            _ki.init(this, '_ki');
            return boss(hash_map(keyword('type'), keyword('employer'), keyword('name'), 'Fred'));
        }()).to.eql('Fred');
    });
});
describe('atoms', function () {
    it('should allow to define reference types with read and write callbacks', function () {
        _ki = {
            init: function (self$5584, ns_name$5585) {
                if (_ki.namespaces[ns_name$5585] === undefined) {
                    _ki.namespaces[ns_name$5585] = { vars: {} };
                }
                self$5584._ki_ns_name = ns_name$5585;
                self$5584._ki_ns_ctx = self$5584;
                _ki.intern.bind(self$5584)(_ki.modules.core);
                _ki.intern.bind(self$5584)(_ki.modules.mori);
                _ki.intern.bind(self$5584)(_ki.modules);
                _ki.intern.bind(self$5584)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$5586) {
                for (var e$5587 in obj$5586) {
                    this[e$5587] = obj$5586[e$5587];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$5588) {
                        return x$5588 === false || x$5588 == null ? false : true;
                    },
                    falsey: function (x$5589) {
                        return !truthy(x$5589);
                    },
                    not: function (x$5590) {
                        return !truthy(x$5590);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$5591 = 0;
                        for (var i$5592 = 0; i$5592 < arguments.length; i$5592++) {
                            res$5591 += arguments[i$5592];
                        }
                        return res$5591;
                    },
                    sub: function () {
                        var res$5593 = arguments[0];
                        for (var i$5594 = 1; i$5594 < arguments.length; i$5594++) {
                            res$5593 -= arguments[i$5594];
                        }
                        return res$5593;
                    },
                    mul: function () {
                        var res$5595 = 1;
                        for (var i$5596 = 0; i$5596 < arguments.length; i$5596++) {
                            res$5595 *= arguments[i$5596];
                        }
                        return res$5595;
                    },
                    div: function () {
                        var res$5597 = arguments[0];
                        for (var i$5598 = 1; i$5598 < arguments.length; i$5598++) {
                            res$5597 /= arguments[i$5598];
                        }
                        return res$5597;
                    },
                    mod: function (a$5599, b$5600) {
                        return a$5599 % b$5600;
                    },
                    lt: function () {
                        var res$5601 = true;
                        for (var i$5602 = 0; i$5602 < arguments.length - 1; i$5602++) {
                            res$5601 = res$5601 && arguments[i$5602] < arguments[i$5602 + 1];
                            if (!res$5601)
                                break;
                        }
                        return res$5601;
                    },
                    gt: function () {
                        var res$5603 = true;
                        for (var i$5604 = 0; i$5604 < arguments.length - 1; i$5604++) {
                            res$5603 = res$5603 && arguments[i$5604] > arguments[i$5604 + 1];
                            if (!res$5603)
                                break;
                        }
                        return res$5603;
                    },
                    leq: function () {
                        var res$5605 = true;
                        for (var i$5606 = 0; i$5606 < arguments.length - 1; i$5606++) {
                            res$5605 = res$5605 && arguments[i$5606] <= arguments[i$5606 + 1];
                            if (!res$5605)
                                break;
                        }
                        return res$5605;
                    },
                    geq: function () {
                        var res$5607 = true;
                        for (var i$5608 = 0; i$5608 < arguments.length - 1; i$5608++) {
                            res$5607 = res$5607 && arguments[i$5608] >= arguments[i$5608 + 1];
                        }
                        return res$5607;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$5609) {
                        try {
                            return require('mori');
                        } catch (e$5610) {
                            return mori;
                        }
                    }
                }()
            }
        };
        (function () {
            _ki.init(this, '_ki');
            return function () {
                return function () {
                    return function (r$5616) {
                        (function () {
                            var ref$5624 = r$5616;
                            var val$5627 = 2;
                            var prev_val$5628 = ref$5624._ki_val;
                            ref$5624._ki_val = val$5627;
                            if (ref$5624._ki_wcb) {
                                ref$5624._ki_wcb(val$5627, prev_val$5628);
                            }
                            return val$5627;
                        }.call(this));
                        return function () {
                            var ref$5631 = r$5616;
                            if (ref$5631._ki_rcb) {
                                ref$5631._ki_rcb(ref$5631._ki_val);
                            }
                            return ref$5631._ki_val;
                        }.call(this);
                    }.call(this, {
                        _ki_val: 1,
                        _ki_wcb: function (n$5636, o$5637) {
                            return expect$1466(n$5636).to.eql(2);
                            expect$1466(o$5637).to.eql(1);
                        },
                        _ki_rcb: function (x$5640) {
                            return expect$1466(x$5640).to.eql(2);
                        }
                    });
                }.call(this);
            }.call(this);
        }());
        (function () {
            _ki.init(this, '_ki');
            return function () {
                return function () {
                    return function (r$5648) {
                        (function () {
                            var ref$5657 = r$5648;
                            var val$5658 = ref$5657._ki_val;
                            return function () {
                                var ref$5662 = ref$5657;
                                var val$5669 = inc(val$5658);
                                var prev_val$5670 = ref$5662._ki_val;
                                ref$5662._ki_val = val$5669;
                                if (ref$5662._ki_wcb) {
                                    ref$5662._ki_wcb(val$5669, prev_val$5670);
                                }
                                return val$5669;
                            }.call(this);
                        }.call(this));
                        return expect$1466(function () {
                            _ki.init(this, '_ki');
                            return function () {
                                var ref$5674 = r$5648;
                                if (ref$5674._ki_rcb) {
                                    ref$5674._ki_rcb(ref$5674._ki_val);
                                }
                                return ref$5674._ki_val;
                            }.call(this);
                        }()).to.eql(2);
                    }.call(this, {
                        _ki_val: 1,
                        _ki_wcb: function (n$5679, o$5680) {
                            return expect$1466(n$5679).to.eql(2);
                            expect$1466(o$5680).to.eql(1);
                        },
                        _ki_rcb: function (x$5683) {
                            return expect$1466(x$5683).to.eql(2);
                        }
                    });
                }.call(this);
            }.call(this);
        }());
    });
});
describe('exceptions', function () {
    it('should allow to try expressions and catch exceptions', function () {
        _ki = {
            init: function (self$5690, ns_name$5691) {
                if (_ki.namespaces[ns_name$5691] === undefined) {
                    _ki.namespaces[ns_name$5691] = { vars: {} };
                }
                self$5690._ki_ns_name = ns_name$5691;
                self$5690._ki_ns_ctx = self$5690;
                _ki.intern.bind(self$5690)(_ki.modules.core);
                _ki.intern.bind(self$5690)(_ki.modules.mori);
                _ki.intern.bind(self$5690)(_ki.modules);
                _ki.intern.bind(self$5690)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$5692) {
                for (var e$5693 in obj$5692) {
                    this[e$5693] = obj$5692[e$5693];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$5694) {
                        return x$5694 === false || x$5694 == null ? false : true;
                    },
                    falsey: function (x$5695) {
                        return !truthy(x$5695);
                    },
                    not: function (x$5696) {
                        return !truthy(x$5696);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$5697 = 0;
                        for (var i$5698 = 0; i$5698 < arguments.length; i$5698++) {
                            res$5697 += arguments[i$5698];
                        }
                        return res$5697;
                    },
                    sub: function () {
                        var res$5699 = arguments[0];
                        for (var i$5700 = 1; i$5700 < arguments.length; i$5700++) {
                            res$5699 -= arguments[i$5700];
                        }
                        return res$5699;
                    },
                    mul: function () {
                        var res$5701 = 1;
                        for (var i$5702 = 0; i$5702 < arguments.length; i$5702++) {
                            res$5701 *= arguments[i$5702];
                        }
                        return res$5701;
                    },
                    div: function () {
                        var res$5703 = arguments[0];
                        for (var i$5704 = 1; i$5704 < arguments.length; i$5704++) {
                            res$5703 /= arguments[i$5704];
                        }
                        return res$5703;
                    },
                    mod: function (a$5705, b$5706) {
                        return a$5705 % b$5706;
                    },
                    lt: function () {
                        var res$5707 = true;
                        for (var i$5708 = 0; i$5708 < arguments.length - 1; i$5708++) {
                            res$5707 = res$5707 && arguments[i$5708] < arguments[i$5708 + 1];
                            if (!res$5707)
                                break;
                        }
                        return res$5707;
                    },
                    gt: function () {
                        var res$5709 = true;
                        for (var i$5710 = 0; i$5710 < arguments.length - 1; i$5710++) {
                            res$5709 = res$5709 && arguments[i$5710] > arguments[i$5710 + 1];
                            if (!res$5709)
                                break;
                        }
                        return res$5709;
                    },
                    leq: function () {
                        var res$5711 = true;
                        for (var i$5712 = 0; i$5712 < arguments.length - 1; i$5712++) {
                            res$5711 = res$5711 && arguments[i$5712] <= arguments[i$5712 + 1];
                            if (!res$5711)
                                break;
                        }
                        return res$5711;
                    },
                    geq: function () {
                        var res$5713 = true;
                        for (var i$5714 = 0; i$5714 < arguments.length - 1; i$5714++) {
                            res$5713 = res$5713 && arguments[i$5714] >= arguments[i$5714 + 1];
                        }
                        return res$5713;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$5715) {
                        try {
                            return require('mori');
                        } catch (e$5716) {
                            return mori;
                        }
                    }
                }()
            }
        };
        (function () {
            _ki.init(this, '_ki');
            return function () {
                try {
                    foo.bar;
                } catch (e$5719) {
                    expect$1466(e$5719).to.be.a(ReferenceError);
                }
            }.call(this);
        }());
        var side_effect$5688 = false;
        (function () {
            _ki.init(this, '_ki');
            return function () {
                var ret$5722;
                try {
                    ret$5722 = foo.bar;
                } catch (e$5724) {
                    ret$5722 = expect$1466(e$5724).to.be.a(ReferenceError);
                } finally {
                    side_effect$5688 = true;
                }
                return ret$5722;
            }.call(this);
        }());
        expect$1466(side_effect$5688).to.eql(true);
    });
    it('should allow to throw exceptions', function () {
        _ki = {
            init: function (self$5729, ns_name$5730) {
                if (_ki.namespaces[ns_name$5730] === undefined) {
                    _ki.namespaces[ns_name$5730] = { vars: {} };
                }
                self$5729._ki_ns_name = ns_name$5730;
                self$5729._ki_ns_ctx = self$5729;
                _ki.intern.bind(self$5729)(_ki.modules.core);
                _ki.intern.bind(self$5729)(_ki.modules.mori);
                _ki.intern.bind(self$5729)(_ki.modules);
                _ki.intern.bind(self$5729)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$5731) {
                for (var e$5732 in obj$5731) {
                    this[e$5732] = obj$5731[e$5732];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$5733) {
                        return x$5733 === false || x$5733 == null ? false : true;
                    },
                    falsey: function (x$5734) {
                        return !truthy(x$5734);
                    },
                    not: function (x$5735) {
                        return !truthy(x$5735);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$5736 = 0;
                        for (var i$5737 = 0; i$5737 < arguments.length; i$5737++) {
                            res$5736 += arguments[i$5737];
                        }
                        return res$5736;
                    },
                    sub: function () {
                        var res$5738 = arguments[0];
                        for (var i$5739 = 1; i$5739 < arguments.length; i$5739++) {
                            res$5738 -= arguments[i$5739];
                        }
                        return res$5738;
                    },
                    mul: function () {
                        var res$5740 = 1;
                        for (var i$5741 = 0; i$5741 < arguments.length; i$5741++) {
                            res$5740 *= arguments[i$5741];
                        }
                        return res$5740;
                    },
                    div: function () {
                        var res$5742 = arguments[0];
                        for (var i$5743 = 1; i$5743 < arguments.length; i$5743++) {
                            res$5742 /= arguments[i$5743];
                        }
                        return res$5742;
                    },
                    mod: function (a$5744, b$5745) {
                        return a$5744 % b$5745;
                    },
                    lt: function () {
                        var res$5746 = true;
                        for (var i$5747 = 0; i$5747 < arguments.length - 1; i$5747++) {
                            res$5746 = res$5746 && arguments[i$5747] < arguments[i$5747 + 1];
                            if (!res$5746)
                                break;
                        }
                        return res$5746;
                    },
                    gt: function () {
                        var res$5748 = true;
                        for (var i$5749 = 0; i$5749 < arguments.length - 1; i$5749++) {
                            res$5748 = res$5748 && arguments[i$5749] > arguments[i$5749 + 1];
                            if (!res$5748)
                                break;
                        }
                        return res$5748;
                    },
                    leq: function () {
                        var res$5750 = true;
                        for (var i$5751 = 0; i$5751 < arguments.length - 1; i$5751++) {
                            res$5750 = res$5750 && arguments[i$5751] <= arguments[i$5751 + 1];
                            if (!res$5750)
                                break;
                        }
                        return res$5750;
                    },
                    geq: function () {
                        var res$5752 = true;
                        for (var i$5753 = 0; i$5753 < arguments.length - 1; i$5753++) {
                            res$5752 = res$5752 && arguments[i$5753] >= arguments[i$5753 + 1];
                        }
                        return res$5752;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$5754) {
                        try {
                            return require('mori');
                        } catch (e$5755) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return function () {
                return function () {
                    throw Error('foo');
                }.call(this);
            };
        }()).to.throwError();
    });
});
describe('this and fnth', function () {
    it('should handle binding this fn-wise correctly from within IIFN', function () {
        _ki = {
            init: function (self$5772, ns_name$5773) {
                if (_ki.namespaces[ns_name$5773] === undefined) {
                    _ki.namespaces[ns_name$5773] = { vars: {} };
                }
                self$5772._ki_ns_name = ns_name$5773;
                self$5772._ki_ns_ctx = self$5772;
                _ki.intern.bind(self$5772)(_ki.modules.core);
                _ki.intern.bind(self$5772)(_ki.modules.mori);
                _ki.intern.bind(self$5772)(_ki.modules);
                _ki.intern.bind(self$5772)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$5774) {
                for (var e$5775 in obj$5774) {
                    this[e$5775] = obj$5774[e$5775];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$5776) {
                        return x$5776 === false || x$5776 == null ? false : true;
                    },
                    falsey: function (x$5777) {
                        return !truthy(x$5777);
                    },
                    not: function (x$5778) {
                        return !truthy(x$5778);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$5779 = 0;
                        for (var i$5780 = 0; i$5780 < arguments.length; i$5780++) {
                            res$5779 += arguments[i$5780];
                        }
                        return res$5779;
                    },
                    sub: function () {
                        var res$5781 = arguments[0];
                        for (var i$5782 = 1; i$5782 < arguments.length; i$5782++) {
                            res$5781 -= arguments[i$5782];
                        }
                        return res$5781;
                    },
                    mul: function () {
                        var res$5783 = 1;
                        for (var i$5784 = 0; i$5784 < arguments.length; i$5784++) {
                            res$5783 *= arguments[i$5784];
                        }
                        return res$5783;
                    },
                    div: function () {
                        var res$5785 = arguments[0];
                        for (var i$5786 = 1; i$5786 < arguments.length; i$5786++) {
                            res$5785 /= arguments[i$5786];
                        }
                        return res$5785;
                    },
                    mod: function (a$5787, b$5788) {
                        return a$5787 % b$5788;
                    },
                    lt: function () {
                        var res$5789 = true;
                        for (var i$5790 = 0; i$5790 < arguments.length - 1; i$5790++) {
                            res$5789 = res$5789 && arguments[i$5790] < arguments[i$5790 + 1];
                            if (!res$5789)
                                break;
                        }
                        return res$5789;
                    },
                    gt: function () {
                        var res$5791 = true;
                        for (var i$5792 = 0; i$5792 < arguments.length - 1; i$5792++) {
                            res$5791 = res$5791 && arguments[i$5792] > arguments[i$5792 + 1];
                            if (!res$5791)
                                break;
                        }
                        return res$5791;
                    },
                    leq: function () {
                        var res$5793 = true;
                        for (var i$5794 = 0; i$5794 < arguments.length - 1; i$5794++) {
                            res$5793 = res$5793 && arguments[i$5794] <= arguments[i$5794 + 1];
                            if (!res$5793)
                                break;
                        }
                        return res$5793;
                    },
                    geq: function () {
                        var res$5795 = true;
                        for (var i$5796 = 0; i$5796 < arguments.length - 1; i$5796++) {
                            res$5795 = res$5795 && arguments[i$5796] >= arguments[i$5796 + 1];
                        }
                        return res$5795;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$5797) {
                        try {
                            return require('mori');
                        } catch (e$5798) {
                            return mori;
                        }
                    }
                }()
            }
        };
        (function () {
            _ki.init(this, '_ki');
            return function () {
                _ki_ns_ctx['somefn'] = function () {
                    return function () {
                        return function (a$5808) {
                            return this.someprop;
                        }.call(this, 1);
                    }.call(this);
                };
                _ki.namespaces[_ki_ns_name].vars.somefn = _ki_ns_ctx['somefn'];
                return _ki_ns_ctx['somefn'];
            }();
        }());
        var bar$5767 = { someprop: 1 };
        var baz$5768 = {};
        expect$1466(function () {
            _ki.init(this, '_ki');
            return somefn.bind(bar$5767)();
        }()).to.eql(1);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return somefn.bind(baz$5768)();
        }()).to.eql(undefined);
        expect$1466(function () {
            _ki.init(this, '_ki');
            return somefn();
        }()).to.eql(undefined);
    });
    it('should allow a shorthand notation for defining a fn bound to the enclosing this, both named and unnamed', function () {
        _ki = {
            init: function (self$5850, ns_name$5851) {
                if (_ki.namespaces[ns_name$5851] === undefined) {
                    _ki.namespaces[ns_name$5851] = { vars: {} };
                }
                self$5850._ki_ns_name = ns_name$5851;
                self$5850._ki_ns_ctx = self$5850;
                _ki.intern.bind(self$5850)(_ki.modules.core);
                _ki.intern.bind(self$5850)(_ki.modules.mori);
                _ki.intern.bind(self$5850)(_ki.modules);
                _ki.intern.bind(self$5850)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$5852) {
                for (var e$5853 in obj$5852) {
                    this[e$5853] = obj$5852[e$5853];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$5854) {
                        return x$5854 === false || x$5854 == null ? false : true;
                    },
                    falsey: function (x$5855) {
                        return !truthy(x$5855);
                    },
                    not: function (x$5856) {
                        return !truthy(x$5856);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$5857 = 0;
                        for (var i$5858 = 0; i$5858 < arguments.length; i$5858++) {
                            res$5857 += arguments[i$5858];
                        }
                        return res$5857;
                    },
                    sub: function () {
                        var res$5859 = arguments[0];
                        for (var i$5860 = 1; i$5860 < arguments.length; i$5860++) {
                            res$5859 -= arguments[i$5860];
                        }
                        return res$5859;
                    },
                    mul: function () {
                        var res$5861 = 1;
                        for (var i$5862 = 0; i$5862 < arguments.length; i$5862++) {
                            res$5861 *= arguments[i$5862];
                        }
                        return res$5861;
                    },
                    div: function () {
                        var res$5863 = arguments[0];
                        for (var i$5864 = 1; i$5864 < arguments.length; i$5864++) {
                            res$5863 /= arguments[i$5864];
                        }
                        return res$5863;
                    },
                    mod: function (a$5865, b$5866) {
                        return a$5865 % b$5866;
                    },
                    lt: function () {
                        var res$5867 = true;
                        for (var i$5868 = 0; i$5868 < arguments.length - 1; i$5868++) {
                            res$5867 = res$5867 && arguments[i$5868] < arguments[i$5868 + 1];
                            if (!res$5867)
                                break;
                        }
                        return res$5867;
                    },
                    gt: function () {
                        var res$5869 = true;
                        for (var i$5870 = 0; i$5870 < arguments.length - 1; i$5870++) {
                            res$5869 = res$5869 && arguments[i$5870] > arguments[i$5870 + 1];
                            if (!res$5869)
                                break;
                        }
                        return res$5869;
                    },
                    leq: function () {
                        var res$5871 = true;
                        for (var i$5872 = 0; i$5872 < arguments.length - 1; i$5872++) {
                            res$5871 = res$5871 && arguments[i$5872] <= arguments[i$5872 + 1];
                            if (!res$5871)
                                break;
                        }
                        return res$5871;
                    },
                    geq: function () {
                        var res$5873 = true;
                        for (var i$5874 = 0; i$5874 < arguments.length - 1; i$5874++) {
                            res$5873 = res$5873 && arguments[i$5874] >= arguments[i$5874 + 1];
                        }
                        return res$5873;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$5875) {
                        try {
                            return require('mori');
                        } catch (e$5876) {
                            return mori;
                        }
                    }
                }()
            }
        };
        var fn1$5847, fn2$5848;
        (function () {
            _ki.init(this, '_ki');
            return function () {
                this.jee = 1;
                return function () {
                    return function (a$5884) {
                        return function (b$5887) {
                            return function (c$5890) {
                                fn1$5847 = a$5884;
                                fn2$5848 = b$5887;
                                return fn3 = c$5890;
                            }.call(this, function cfn() {
                                return this.jee;
                            }.bind(this));
                        }.call(this, function () {
                            return this.jee;
                        }.bind(this));
                    }.call(this, function () {
                        return this.jee;
                    });
                }.call(this);
            }.call(this);
        }());
        expect$1466(fn1$5847.bind({ jee: 2 })()).to.eql(2);
        expect$1466(fn2$5848.bind({ jee: 2 })()).to.eql(1);
        expect$1466(fn3.bind({ jee: 2 })()).to.eql(1);
    });
});
describe('str', function () {
    it('should allow to concatenate strings and literals', function () {
        _ki = {
            init: function (self$5906, ns_name$5907) {
                if (_ki.namespaces[ns_name$5907] === undefined) {
                    _ki.namespaces[ns_name$5907] = { vars: {} };
                }
                self$5906._ki_ns_name = ns_name$5907;
                self$5906._ki_ns_ctx = self$5906;
                _ki.intern.bind(self$5906)(_ki.modules.core);
                _ki.intern.bind(self$5906)(_ki.modules.mori);
                _ki.intern.bind(self$5906)(_ki.modules);
                _ki.intern.bind(self$5906)(_ki.namespaces[_ki_ns_name].vars);
            },
            intern: function (obj$5908) {
                for (var e$5909 in obj$5908) {
                    this[e$5909] = obj$5908[e$5909];
                }
            },
            namespaces: {},
            modules: {
                core: {
                    truthy: function (x$5910) {
                        return x$5910 === false || x$5910 == null ? false : true;
                    },
                    falsey: function (x$5911) {
                        return !truthy(x$5911);
                    },
                    not: function (x$5912) {
                        return !truthy(x$5912);
                    },
                    eq: function () {
                        return equals.apply(null, arguments);
                    },
                    neq: function () {
                        return !equals.apply(null, arguments);
                    },
                    add: function () {
                        var res$5913 = 0;
                        for (var i$5914 = 0; i$5914 < arguments.length; i$5914++) {
                            res$5913 += arguments[i$5914];
                        }
                        return res$5913;
                    },
                    sub: function () {
                        var res$5915 = arguments[0];
                        for (var i$5916 = 1; i$5916 < arguments.length; i$5916++) {
                            res$5915 -= arguments[i$5916];
                        }
                        return res$5915;
                    },
                    mul: function () {
                        var res$5917 = 1;
                        for (var i$5918 = 0; i$5918 < arguments.length; i$5918++) {
                            res$5917 *= arguments[i$5918];
                        }
                        return res$5917;
                    },
                    div: function () {
                        var res$5919 = arguments[0];
                        for (var i$5920 = 1; i$5920 < arguments.length; i$5920++) {
                            res$5919 /= arguments[i$5920];
                        }
                        return res$5919;
                    },
                    mod: function (a$5921, b$5922) {
                        return a$5921 % b$5922;
                    },
                    lt: function () {
                        var res$5923 = true;
                        for (var i$5924 = 0; i$5924 < arguments.length - 1; i$5924++) {
                            res$5923 = res$5923 && arguments[i$5924] < arguments[i$5924 + 1];
                            if (!res$5923)
                                break;
                        }
                        return res$5923;
                    },
                    gt: function () {
                        var res$5925 = true;
                        for (var i$5926 = 0; i$5926 < arguments.length - 1; i$5926++) {
                            res$5925 = res$5925 && arguments[i$5926] > arguments[i$5926 + 1];
                            if (!res$5925)
                                break;
                        }
                        return res$5925;
                    },
                    leq: function () {
                        var res$5927 = true;
                        for (var i$5928 = 0; i$5928 < arguments.length - 1; i$5928++) {
                            res$5927 = res$5927 && arguments[i$5928] <= arguments[i$5928 + 1];
                            if (!res$5927)
                                break;
                        }
                        return res$5927;
                    },
                    geq: function () {
                        var res$5929 = true;
                        for (var i$5930 = 0; i$5930 < arguments.length - 1; i$5930++) {
                            res$5929 = res$5929 && arguments[i$5930] >= arguments[i$5930 + 1];
                        }
                        return res$5929;
                    },
                    prn: function () {
                        console.log.apply(console, arguments);
                    },
                    str: function () {
                        return String.prototype.concat.apply('', arguments);
                    }
                },
                mori: function () {
                    try {
                        return require('ki/node_modules/mori');
                    } catch (e$5931) {
                        try {
                            return require('mori');
                        } catch (e$5932) {
                            return mori;
                        }
                    }
                }()
            }
        };
        expect$1466(function () {
            _ki.init(this, '_ki');
            return str('a', 2, 'b', 3, 'c');
        }()).to.eql('a2b3c');
    });
});